{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap 8e9368990271b6508199","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./other/utils.js","webpack:///external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-form.js","webpack:///./directives/index.js","webpack:///./index.common.js","webpack:///./providers/formlyApiCheck.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyErrorAndWarningsUrlPrefix.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyValidationMessages.js","webpack:///./providers/formlyVersion.js","webpack:///./providers/index.js","webpack:///./run/formlyCustomTags.js","webpack:///./run/formlyNgModelAttrsManipulator.js","webpack:///./run/index.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///./services/index.js","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_24__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","angular","version","window","formlyEval","scope","expression","modelValue","viewValue","isFunction","$eval","$viewValue","$modelValue","getFieldId","formId","options","index","type","template","templateUrl","key","join","reverseDeepMerge","dest","forEach","arguments","src","val","prop","isDefined","objAndSameType","copy","obj1","obj2","isObject","Object","getPrototypeOf","findByNodeName","el","nodeName","element","toUpperCase","children","i","length","node","ngModule","formlyCustomValidation","formlyUtil","$q","isPromiseLike","obj","then","checkValidators","validators","allowedProperties","validatorsWithExtraProps","validator","name","isString","extraProps","v","indexOf","push","keys","Error","JSON","stringify","restrict","link","attrs","ctrl","validation","messages","useNewValidatorsApi","hasOwnProperty","setupWithValidators","validatorCollection","isPossiblyAsync","value","when","reject","setupWithParsers","inFlightValidator","undefined","$parsers","unshift","isValid","$pending","$setValidity","message","directive","tests","$inject","formlyField","$http","$compile","$templateCache","formlyConfig","formlyValidationMessages","formlyApiCheck","formlyUsability","formlyWarn","asHtml","wrapper","append","html","getFieldTemplate","getType","getFieldError","getTemplate","isUrl","httpOptions","cache","get","response","data","error","transcludeInWrappers","getWrapperOption","checkWrapper","validateOptions","runApiCheck","promises","map","w","all","wrappersTemplates","wrapperTemplate","checkWrapperTemplate","reverse","totalWrapper","shift","doTransclusion","superWrapper","transcludeEl","find","replaceWith","arrayify","getWrapper","getWrapperByType","typeWrappers","concat","defaultWrapper","checkApi","formlyFieldOptions","prefix","url","_ref","apiCheck","apiCheckInstance","apiCheckFunction","apiCheckOptions","instance","fn","shape","config","output","docsBaseUrl","transclude","model","fields","formState","form","controller","$scope","$timeout","$parse","$controller","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","setter","assign","promise","newVal","simplifyLife","templateOptions","mergeFieldOptionsWithTypeDefaults","mergeOptions","defaultOptions","properOrder","optionsTypes","typeName","extraOptions","extendOptionsWithDefaults","extend","setFormControl","noFormControl","$watch","formControl","fc","addShowMessagesWatcher","addModelWatcher","show","$invalid","$touched","errorExistsAndShouldBeVisible","showError","addValidationMessages","invokeControllers","opts","fieldType","to","setElementTemplate","templateEl","contents","apply","thusly","args","runManipulators","manipulators","chain","manipulator","newTemplate","templateManipulators","preWrapper","postWrapper","isArray","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","_toConsumableArray","arr","Array","arr2","from","_slice","prototype","slice","formlyForm","currentFormId","rootEl","formName","replace","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","originalExpression","modifyArgs","displayName","originalListener","_len","originalArgs","_key","newResult","$parent","ngModuleName","shapeRequiredIfNot","otherProps","propChecker","shapeRequiredIfNotDefinition","propName","location","propExists","otherPropsExist","some","otherProp","utils","getError","checkerHelpers","setupChecker","constant","formlyExpression","oneOfType","string","func","specifyWrapperType","oneOf","typeOrArrayOf","apiCheckProperty","objectOf","apiCheckInstanceProperty","onlyIf","withProperties","warn","throw","apiCheckFunctionProperty","formlyWrapperType","optional","ifNot","types","overwriteOk","bool","object","strict","fieldOptionsApiShape","number","modelOptions","updateOn","debounce","allowInvalid","getterSetter","timezone","hide","ngModelAttrs","any","attribute","bound","array","typeOptionsDefaultOptions","formlyTypeOptions","extends","formlyUsabilityProvider","setType","checkType","extendTypeOptions","typeMap","checkOverwrite","extendsType","extendTypeControllerFunction","extendTypeLinkFunction","extendTypeValidateOptionsFunction","extendTypeDefaultOptions","extendsCtrl","optionsCtrl","extendsFn","optionsFn","originalDefaultOptions","mergedOptions","extendsDO","optionsDO","optionsDOIsFn","extendsDOIsFn","extendsDefaultOptions","mergedDefaultOptions","extenderOptionsDefaultOptions","newDefaultOptions","throwError","errorContext","setWrapper","_x","_x2","_again","wrapperOptions","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","property","newValue","objectName","wrappers","removeWrapperByName","removeWrappersForType","_this","disableWarnings","console","_this2","getFormlyError","extras","disableNgModelAttrsManipulator","ngModelAttrsManipulatorPreferBound","$get","provider","formlyVersion","errorInfoSlug","getErrorMessage","toJson","errorsAndWarningsUrlPrefix","urlSuffix","additionalInfo","formlyTransclude","addTemplateOptionValueMessage","suffix","alternate","templateOptionValue","addStringMessage","addCustomTags","document","div","createElement","innerHTML","isIeLessThan9","getElementsByTagName","customElements","run","addFormlyNgModelAttrsManipulator","ngModelAttrsManipulator","addTemplateOptionsAttrs","ep","ngModelAttributes","getBuiltinAttributes","attrVal","attrName","ref","toVal","epVal","getEpValue","inTo","inEp","addIfNotPresent","modelEls","boundOnly","bothAttributeAndBound","expressionOnly","attributeOnly","item","substr","attr","noTouchy","querySelectorAll","formlyErrorAndWarningsUrlPrefix","$log","warnInfoSlug"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"api-check\"), require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"api-check\", \"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"api-check\"), require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"apiCheck\"], root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_24__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"api-check\"), require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"api-check\", \"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"api-check\"), require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"apiCheck\"], root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_24__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = __webpack_require__(10);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\tvar angular = __webpack_require__(24);\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"https://github.com/formly-js/angular-formly/blob/\" + (\"5.0.3\") + \"/other/ERRORS_AND_WARNINGS.md#\";\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = { formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName };\n\t\n\tfunction formlyEval(scope, expression, modelValue, viewValue) {\n\t  if (angular.isFunction(expression)) {\n\t    return expression(viewValue || modelValue, modelValue, scope);\n\t  } else {\n\t    return scope.$eval(expression, {\n\t      $viewValue: viewValue || modelValue,\n\t      $modelValue: modelValue\n\t    });\n\t  }\n\t}\n\t\n\tfunction getFieldId(formId, options, index) {\n\t  var type = options.type;\n\t  if (!type && options.template) {\n\t    type = \"template\";\n\t  } else if (!type && options.templateUrl) {\n\t    type = \"templateUrl\";\n\t  }\n\t\n\t  return [formId, type, options.key, index].join(\"_\");\n\t}\n\t\n\tfunction reverseDeepMerge(dest) {\n\t  angular.forEach(arguments, function (src, index) {\n\t    if (!index) {\n\t      return;\n\t    }\n\t    angular.forEach(src, function (val, prop) {\n\t      if (!angular.isDefined(dest[prop])) {\n\t        dest[prop] = angular.copy(val);\n\t      } else if (objAndSameType(dest[prop], val)) {\n\t        reverseDeepMerge(dest[prop], val);\n\t      }\n\t    });\n\t  });\n\t}\n\t\n\tfunction objAndSameType(obj1, obj2) {\n\t  return angular.isObject(obj1) && angular.isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t}\n\t\n\t//recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\n\tfunction findByNodeName(el, nodeName) {\n\t  if (!el.prop) {\n\t    // not a jQuery or jqLite object -> wrap it\n\t    el = angular.element(el);\n\t  }\n\t\n\t  if (el.prop(\"nodeName\") === nodeName.toUpperCase()) {\n\t    return el;\n\t  }\n\t\n\t  var c = el.children();\n\t  for (var i = 0; c && i < c.length; i++) {\n\t    var node = findByNodeName(c[i], nodeName);\n\t    if (node) {\n\t      return node;\n\t    }\n\t  }\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyCustomValidation\", formlyCustomValidation);\n\t\n\t  formlyCustomValidation.tests = false ? require(\"./formly-custom-validation.test\")(ngModule) : null;\n\t\n\t  function formlyCustomValidation(formlyUtil, $q) {\n\t    return {\n\t      restrict: \"A\",\n\t      require: \"ngModel\",\n\t      link: function link(scope, el, attrs, ctrl) {\n\t        var validators = scope.$eval(attrs.formlyCustomValidation);\n\t        if (!validators) {\n\t          return;\n\t        }\n\t        checkValidators(validators);\n\t        scope.options.validation.messages = scope.options.validation.messages || {};\n\t\n\t        var useNewValidatorsApi = ctrl.hasOwnProperty(\"$validators\") && !attrs.hasOwnProperty(\"useParsers\");\n\t        angular.forEach(validators, function (validator, name) {\n\t          var message = validator.message;\n\t          if (message) {\n\t            scope.options.validation.messages[name] = function () {\n\t              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t            };\n\t          }\n\t          validator = angular.isObject(validator) ? validator.expression : validator;\n\t          var isPossiblyAsync = !angular.isString(validator);\n\t          if (useNewValidatorsApi) {\n\t            setupWithValidators();\n\t          } else {\n\t            setupWithParsers();\n\t          }\n\t\n\t          function setupWithValidators() {\n\t            var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n\t            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n\t              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t              if (isPossiblyAsync) {\n\t                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n\t              } else {\n\t                return value;\n\t              }\n\t            };\n\t          }\n\t\n\t          function setupWithParsers() {\n\t            var inFlightValidator = undefined;\n\t            ctrl.$parsers.unshift(function (viewValue) {\n\t              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t              if (isPromiseLike(isValid)) {\n\t                ctrl.$pending = ctrl.$pending || {};\n\t                ctrl.$pending[name] = true;\n\t                inFlightValidator = isValid;\n\t                isValid.then(function () {\n\t                  if (inFlightValidator === isValid) {\n\t                    ctrl.$setValidity(name, true);\n\t                  }\n\t                })[\"catch\"](function () {\n\t                  if (inFlightValidator === isValid) {\n\t                    ctrl.$setValidity(name, false);\n\t                  }\n\t                })[\"finally\"](function () {\n\t                  if (Object.keys(ctrl.$pending).length === 1) {\n\t                    delete ctrl.$pending;\n\t                  } else {\n\t                    delete ctrl.$pending[name];\n\t                  }\n\t                });\n\t              } else {\n\t                ctrl.$setValidity(name, isValid);\n\t              }\n\t              return viewValue;\n\t            });\n\t          }\n\t        });\n\t      }\n\t    };\n\t\n\t    function isPromiseLike(obj) {\n\t      return obj && angular.isFunction(obj.then);\n\t    }\n\t\n\t    function checkValidators(validators) {\n\t      var allowedProperties = [\"expression\", \"message\"];\n\t      var validatorsWithExtraProps = {};\n\t      angular.forEach(validators, function (validator, name) {\n\t        if (angular.isString(validator)) {\n\t          return;\n\t        }\n\t        var extraProps = [];\n\t        angular.forEach(validator, function (v, key) {\n\t          if (allowedProperties.indexOf(key) === -1) {\n\t            extraProps.push(key);\n\t          }\n\t        });\n\t        if (extraProps.length) {\n\t          validatorsWithExtraProps[name] = extraProps;\n\t        }\n\t      });\n\t      if (Object.keys(validatorsWithExtraProps).length) {\n\t        throw new Error([\"Validators are only allowed to be functions or objects that have \" + allowedProperties.join(\", \") + \".\", \"You provided some extra properties: \" + JSON.stringify(validatorsWithExtraProps)].join(\" \"));\n\t      }\n\t    }\n\t  }\n\t  formlyCustomValidation.$inject = [\"formlyUtil\", \"$q\"];\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyField\", formlyField);\n\t\n\t  formlyField.tests = false ? require(\"./formly-field.test\")(ngModule) : null;\n\t\n\t  /**\n\t   * @ngdoc directive\n\t   * @name formlyField\n\t   * @restrict AE\n\t   */\n\t  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n\t    return {\n\t      restrict: \"AE\",\n\t      transclude: true,\n\t      scope: {\n\t        options: \"=\",\n\t        model: \"=\",\n\t        formId: \"@\",\n\t        index: \"=?\",\n\t        fields: \"=?\",\n\t        formState: \"=?\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"$timeout\", \"$parse\", \"$controller\", function fieldController($scope, $timeout, $parse, $controller) {\n\t        var opts = $scope.options;\n\t        var fieldType = opts.type && formlyConfig.getType(opts.type);\n\t        simplifyLife(opts);\n\t        mergeFieldOptionsWithTypeDefaults(opts, fieldType);\n\t        extendOptionsWithDefaults(opts, $scope.index);\n\t        checkApi(opts);\n\t        // set field id to link labels and fields\n\t        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);\n\t\n\t        // initalization\n\t        runExpressions();\n\t        setFormControl($scope, opts);\n\t        addModelWatcher($scope, opts);\n\t        addValidationMessages(opts);\n\t        // simplify things\n\t        // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t        $scope.to = $scope.options.templateOptions;\n\t        invokeControllers($scope, opts, fieldType);\n\t\n\t        // function definitions\n\t        function runExpressions() {\n\t          $timeout(function () {\n\t            // must run on next tick to make sure that the current value is correct.\n\t            var field = $scope.options;\n\t            var currentValue = valueGetterSetter();\n\t            angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t              var setter = $parse(prop).assign;\n\t              var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n\t              promise.then(function (value) {\n\t                setter(field, value);\n\t              });\n\t            });\n\t          });\n\t        }\n\t\n\t        function valueGetterSetter(newVal) {\n\t          if (!$scope.model || !$scope.options.key) {\n\t            return;\n\t          }\n\t          if (angular.isDefined(newVal)) {\n\t            $scope.model[$scope.options.key] = newVal;\n\t          }\n\t          return $scope.model[$scope.options.key];\n\t        }\n\t\n\t        function simplifyLife(options) {\n\t          // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t          formlyUtil.reverseDeepMerge(options, {\n\t            data: {},\n\t            templateOptions: {},\n\t            validation: {}\n\t          });\n\t        }\n\t\n\t        function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t          if (type) {\n\t            mergeOptions(options, type.defaultOptions);\n\t          }\n\t          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t          angular.forEach(properOrder, function (typeName) {\n\t            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t          });\n\t        }\n\t\n\t        function mergeOptions(options, extraOptions) {\n\t          if (extraOptions) {\n\t            if (angular.isFunction(extraOptions)) {\n\t              extraOptions = extraOptions(options);\n\t            }\n\t            formlyUtil.reverseDeepMerge(options, extraOptions);\n\t          }\n\t        }\n\t\n\t        function extendOptionsWithDefaults(options, index) {\n\t          angular.extend(options, {\n\t            // attach the key in case the formly-field directive is used directly\n\t            key: options.key || index || 0,\n\t            value: valueGetterSetter,\n\t            runExpressions: runExpressions\n\t          });\n\t        }\n\t\n\t        // initialization functions\n\t        function setFormControl(scope, options) {\n\t          if (options.noFormControl) {\n\t            return;\n\t          }\n\t          scope.$watch(\"form[\\\"\" + scope.id + \"\\\"]\", function (formControl) {\n\t            if (formControl) {\n\t              scope.fc = formControl; // shortcut for template authors\n\t              scope.options.formControl = formControl;\n\t              addShowMessagesWatcher(scope, options);\n\t            }\n\t          });\n\t        }\n\t\n\t        function addModelWatcher(scope, options) {\n\t          if (options.model) {\n\t            scope.$watch(\"options.model\", runExpressions, true);\n\t          }\n\t        }\n\t\n\t        function addShowMessagesWatcher(scope, options) {\n\t          scope.$watch(function () {\n\t            if (typeof scope.options.validation.show === \"boolean\") {\n\t              return scope.fc.$invalid && scope.options.validation.show;\n\t            } else {\n\t              return scope.fc.$invalid && scope.fc.$touched;\n\t            }\n\t          }, function (show) {\n\t            options.validation.errorExistsAndShouldBeVisible = show;\n\t            scope.showError = show; // shortcut for template authors\n\t          });\n\t        }\n\t\n\t        function addValidationMessages(options) {\n\t          options.validation.messages = options.validation.messages || {};\n\t          angular.forEach(formlyValidationMessages.messages, function (expression, name) {\n\t            if (!options.validation.messages[name]) {\n\t              options.validation.messages[name] = function (viewValue, modelValue, scope) {\n\t                return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t              };\n\t            }\n\t          });\n\t        }\n\t\n\t        function invokeControllers(scope) {\n\t          var options = arguments[1] === undefined ? {} : arguments[1];\n\t          var type = arguments[2] === undefined ? {} : arguments[2];\n\t\n\t          angular.forEach([type.controller, options.controller], function (controller) {\n\t            if (controller) {\n\t              $controller(controller, { $scope: scope });\n\t            }\n\t          });\n\t        }\n\t      }],\n\t      link: function fieldLink(scope, el) {\n\t        var type = scope.options.type && formlyConfig.getType(scope.options.type);\n\t        var args = arguments;\n\t        var thusly = this;\n\t        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)[\"catch\"](function (error) {\n\t          formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n\t        });\n\t\n\t        function setElementTemplate(templateEl) {\n\t          el.html(asHtml(templateEl));\n\t          $compile(el.contents())(scope);\n\t          if (type && type.link) {\n\t            type.link.apply(thusly, args);\n\t          }\n\t          if (scope.options.link) {\n\t            scope.options.link.apply(thusly, args);\n\t          }\n\t        }\n\t\n\t        function runManipulators(manipulators) {\n\t          return function runManipulatorsOnTemplate(template) {\n\t            var chain = $q.when(template);\n\t            angular.forEach(manipulators, function (manipulator) {\n\t              chain = chain.then(function (template) {\n\t                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t                });\n\t              });\n\t            });\n\t            return chain;\n\t          };\n\t        }\n\t      }\n\t    };\n\t\n\t    function asHtml(el) {\n\t      var wrapper = angular.element(\"<a></a>\");\n\t      return wrapper.append(el).html();\n\t    }\n\t\n\t    function getFieldTemplate(options) {\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      var template = options.template || type && type.template;\n\t      var templateUrl = options.templateUrl || type && type.templateUrl;\n\t      if (!template && !templateUrl) {\n\t        throw formlyUsability.getFieldError(\"type-type-has-no-template\", \"Type '\" + options.type + \"' has not template. On element:\", options);\n\t      }\n\t      return getTemplate(template || templateUrl, !template);\n\t    }\n\t\n\t    function getTemplate(template, isUrl) {\n\t      if (!isUrl) {\n\t        return $q.when(template);\n\t      } else {\n\t        var httpOptions = { cache: $templateCache };\n\t        return $http.get(template, httpOptions).then(function (response) {\n\t          return response.data;\n\t        })[\"catch\"](function (error) {\n\t          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n\t        });\n\t      }\n\t    }\n\t\n\t    function transcludeInWrappers(options) {\n\t      var wrapper = getWrapperOption(options);\n\t\n\t      return function transcludeTemplate(template) {\n\t        if (!wrapper.length) {\n\t          return $q.when(template);\n\t        }\n\t\n\t        wrapper.forEach(function (wrapper) {\n\t          formlyUsability.checkWrapper(wrapper, options);\n\t          wrapper.validateOptions && wrapper.validateOptions(options);\n\t          runApiCheck(wrapper, options);\n\t        });\n\t        var promises = wrapper.map(function (w) {\n\t          return getTemplate(w.template || w.templateUrl, !w.template);\n\t        });\n\t        return $q.all(promises).then(function (wrappersTemplates) {\n\t          wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t          });\n\t          wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t          var totalWrapper = wrappersTemplates.shift();\n\t          wrappersTemplates.forEach(function (wrapperTemplate) {\n\t            totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t          });\n\t          return doTransclusion(totalWrapper, template);\n\t        });\n\t      };\n\t    }\n\t\n\t    function doTransclusion(wrapper, template) {\n\t      var superWrapper = angular.element(\"<a></a>\"); // this allows people not have to have a single root in wrappers\n\t      superWrapper.append(wrapper);\n\t      var transcludeEl = superWrapper.find(\"formly-transclude\");\n\t      if (!transcludeEl.length) {\n\t        //try it using our custom find function\n\t        transcludeEl = formlyUtil.findByNodeName(superWrapper, \"formly-transclude\");\n\t      }\n\t      transcludeEl.replaceWith(template);\n\t      return superWrapper.html();\n\t    }\n\t\n\t    function getWrapperOption(options) {\n\t      var wrapper = options.wrapper;\n\t      // explicit null means no wrapper\n\t      if (wrapper === null) {\n\t        return [];\n\t      }\n\t\n\t      // nothing specified means use the default wrapper for the type\n\t      if (!wrapper) {\n\t        // get all wrappers that specify they apply to this type\n\t        wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t      } else {\n\t        wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t      }\n\t\n\t      // get all wrappers for that this type specified that it uses.\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      if (type && type.wrapper) {\n\t        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t        wrapper = wrapper.concat(typeWrappers);\n\t      }\n\t\n\t      // add the default wrapper last\n\t      var defaultWrapper = formlyConfig.getWrapper();\n\t      if (defaultWrapper) {\n\t        wrapper.push(defaultWrapper);\n\t      }\n\t      return wrapper;\n\t    }\n\t\n\t    function checkApi(options) {\n\t      formlyApiCheck[\"throw\"](formlyApiCheck.formlyFieldOptions, arguments, {\n\t        prefix: \"formly-field directive\",\n\t        url: \"formly-field-directive-validation-failed\"\n\t      });\n\t      // validate with the type\n\t      var type = options.type && formlyConfig.getType(options.type);\n\t      if (type) {\n\t        if (type.validateOptions) {\n\t          type.validateOptions(options);\n\t        }\n\t        runApiCheck(type, options);\n\t      }\n\t    }\n\t\n\t    function runApiCheck(_ref, options) {\n\t      var apiCheck = _ref.apiCheck;\n\t      var apiCheckInstance = _ref.apiCheckInstance;\n\t      var apiCheckFunction = _ref.apiCheckFunction;\n\t      var apiCheckOptions = _ref.apiCheckOptions;\n\t\n\t      if (!apiCheck) {\n\t        return;\n\t      }\n\t      var instance = apiCheckInstance || formlyApiCheck;\n\t      var fn = apiCheckFunction || \"warn\";\n\t      var shape = instance.shape(apiCheck);\n\t      instance[fn](shape, [options], apiCheckOptions || {\n\t        prefix: \"formly-field \" + name,\n\t        url: formlyApiCheck.config.output.docsBaseUrl + \"formly-field-type-apicheck-failed\"\n\t      });\n\t    }\n\t  }\n\t  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyValidationMessages\", \"formlyApiCheck\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\t\n\t  function arrayify(obj) {\n\t    if (obj && !angular.isArray(obj)) {\n\t      obj = [obj];\n\t    } else if (!obj) {\n\t      obj = [];\n\t    }\n\t    return obj;\n\t  }\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyFocus\", [\"$timeout\", \"$document\", function ($timeout, $document) {\n\t    /* jshint -W052 */\n\t    return {\n\t      restrict: \"A\",\n\t      link: function link(scope, element, attrs) {\n\t        var previousEl = null;\n\t        var el = element[0];\n\t        var doc = $document[0];\n\t        attrs.$observe(\"formlyFocus\", function (value) {\n\t          if (value === \"true\") {\n\t            $timeout(function () {\n\t              previousEl = doc.activeElement;\n\t              el.focus();\n\t            }, ~ ~attrs.focusWait);\n\t          } else if (value === \"false\") {\n\t            if (doc.activeElement === el) {\n\t              el.blur();\n\t              if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n\t                previousEl.focus();\n\t              }\n\t            }\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyForm\", formlyForm);\n\t\n\t  formlyForm.tests = false ? require(\"./formly-form.test\")(ngModule) : null;\n\t\n\t  /**\n\t   * @ngdoc directive\n\t   * @name formlyForm\n\t   * @restrict E\n\t   */\n\t  function formlyForm(formlyUsability, $parse) {\n\t    var currentFormId = 1;\n\t    return {\n\t      restrict: \"E\",\n\t      template: function template(el, attrs) {\n\t        /* jshint -W033 */ // this because jshint is broken I guess...\n\t        var rootEl = attrs.rootEl || \"ng-form\";\n\t        var formName = \"formly_\" + currentFormId++;\n\t        return \"\\n          <\" + rootEl + \" class=\\\"formly\\\"\\n                   name=\\\"\" + formName + \"\\\"\\n                   role=\\\"form\\\">\\n            <div formly-field\\n                 ng-repeat=\\\"field in fields track by $index\\\"\\n                 ng-if=\\\"!field.hide\\\"\\n                 class=\\\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\\\"\\n                 options=\\\"field\\\"\\n                 model=\\\"field.model || model\\\"\\n                 fields=\\\"fields\\\"\\n                 form=\\\"\" + formName + \"\\\"\\n                 form-id=\\\"\" + formName + \"\\\"\\n                 form-state=\\\"options.formState\\\"\\n                 index=\\\"$index\\\">\\n            </div>\\n            <div ng-transclude></div>\\n          </\" + rootEl + \">\\n        \";\n\t      },\n\t      replace: true,\n\t      transclude: true,\n\t      scope: {\n\t        fields: \"=\",\n\t        model: \"=\",\n\t        form: \"=?\",\n\t        options: \"=?\"\n\t      },\n\t      controller: [\"$scope\", function controller($scope) {\n\t        $scope.options = $scope.options || {};\n\t        $scope.options.formState = $scope.options.formState || {};\n\t\n\t        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t        // watch the model and evaluate watch expressions that depend on it.\n\t        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n\t          angular.forEach($scope.fields, function (field) {\n\t            /*jshint -W030 */\n\t            field.runExpressions && field.runExpressions(newResult);\n\t          });\n\t        }, true);\n\t\n\t        function attachKey(field, index) {\n\t          field.key = field.key || index || 0;\n\t        }\n\t\n\t        function setupWatchers(field, index) {\n\t          if (!angular.isDefined(field.watcher)) {\n\t            return;\n\t          }\n\t          var watchers = field.watcher;\n\t          if (!angular.isArray(watchers)) {\n\t            watchers = [watchers];\n\t          }\n\t          angular.forEach(watchers, function (watcher) {\n\t            if (!angular.isDefined(watcher.listener)) {\n\t              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t            }\n\t            var watchExpression = getWatchExpression(watcher, field, index);\n\t            var watchListener = getWatchListener(watcher, field, index);\n\t\n\t            var type = watcher.type || \"$watch\";\n\t            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t          });\n\t        }\n\t\n\t        function getWatchExpression(watcher, field, index) {\n\t          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t          if (angular.isFunction(watchExpression)) {\n\t            // wrap the field's watch expression so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalExpression = watchExpression;\n\t            watchExpression = function formlyWatchExpression() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalExpression.apply(undefined, _toConsumableArray(args));\n\t            };\n\t            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t          }\n\t          return watchExpression;\n\t        }\n\t\n\t        function getWatchListener(watcher, field, index) {\n\t          var watchListener = watcher.listener;\n\t          if (angular.isFunction(watchListener)) {\n\t            // wrap the field's watch listener so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalListener = watchListener;\n\t            watchListener = function formlyWatchListener() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalListener.apply(undefined, _toConsumableArray(args));\n\t            };\n\t            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t          }\n\t          return watchListener;\n\t        }\n\t\n\t        function modifyArgs(watcher, index) {\n\t          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t            originalArgs[_key - 2] = arguments[_key];\n\t          }\n\t\n\t          return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n\t        }\n\t      }],\n\t      link: function link(scope, el, attrs) {\n\t        if (attrs.form) {\n\t          var formId = attrs.name;\n\t          $parse(attrs.form).assign(scope.$parent, scope[formId]);\n\t        }\n\t      }\n\t    };\n\t  }\n\t  formlyForm.$inject = [\"formlyUsability\", \"$parse\"];\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(5)(ngModule);\n\t  __webpack_require__(6)(ngModule);\n\t  __webpack_require__(8)(ngModule);\n\t  __webpack_require__(7)(ngModule);\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar apiCheck = __webpack_require__(4);\n\tif (!apiCheck) {\n\t  throw new Error(\"angular-formly requires the library apiCheck.js! Please include it! \" + __webpack_require__(2) + \"apicheckjs-dependency-required\");\n\t}\n\tvar ngModuleName = \"formly\";\n\tvar angular = __webpack_require__(1);\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\t__webpack_require__(17)(ngModule);\n\t__webpack_require__(23)(ngModule);\n\t__webpack_require__(9)(ngModule);\n\t__webpack_require__(20)(ngModule);\n\t\n\tmodule.exports = ngModuleName;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t\n\t  var apiCheck = __webpack_require__(4)({\n\t    output: {\n\t      prefix: \"angular-formly:\",\n\t      docsBaseUrl: __webpack_require__(2)\n\t    }\n\t  });\n\t\n\t  function shapeRequiredIfNot(otherProps, propChecker) {\n\t    if (!angular.isArray(otherProps)) {\n\t      otherProps = [otherProps];\n\t    }\n\t    var type = \"specified if these are not specified: `\" + otherProps.join(\", \") + \"` (otherwise it's optional)\";\n\t    function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t      var propExists = obj && obj.hasOwnProperty(propName);\n\t      var otherPropsExist = otherProps.some(function (otherProp) {\n\t        return obj && obj.hasOwnProperty(otherProp);\n\t      });\n\t      //console.log(propName, propExists, prop, otherPropsExist, otherProps.join(', '));\n\t      if (!otherPropsExist && !propExists) {\n\t        return apiCheck.utils.getError(propName, location, type);\n\t      } else if (propExists) {\n\t        return propChecker(prop, propName, location, obj);\n\t      }\n\t    }\n\t    shapeRequiredIfNotDefinition.type = type;\n\t    apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n\t    return shapeRequiredIfNotDefinition;\n\t  }\n\t\n\t  ngModule.constant(\"formlyApiCheck\", apiCheck);\n\t  if (false) {\n\t    require(\"./formlyApiCheck.test\")(ngModule);\n\t  }\n\t\n\t  var formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n\t  var specifyWrapperType = apiCheck.oneOfType([apiCheck.oneOf([null]), apiCheck.typeOrArrayOf(apiCheck.string)]);\n\t\n\t  var apiCheckProperty = apiCheck.objectOf(apiCheck.func);\n\t\n\t  var apiCheckInstanceProperty = apiCheck.shape.onlyIf(\"apiCheck\", apiCheck.func.withProperties({\n\t    warn: apiCheck.func,\n\t    \"throw\": apiCheck.func,\n\t    shape: apiCheck.func\n\t  }));\n\t\n\t  var apiCheckFunctionProperty = apiCheck.shape.onlyIf(\"apiCheck\", apiCheck.oneOf([\"throw\", \"warn\"]));\n\t\n\t  var formlyWrapperType = apiCheck.shape({\n\t    name: shapeRequiredIfNot(\"types\", apiCheck.string).optional,\n\t    template: apiCheck.shape.ifNot(\"templateUrl\", apiCheck.string).optional,\n\t    templateUrl: apiCheck.shape.ifNot(\"template\", apiCheck.string).optional,\n\t    types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t    overwriteOk: apiCheck.bool.optional,\n\t    validateOptions: apiCheck.func.optional,\n\t    apiCheck: apiCheckProperty.optional,\n\t    apiCheckInstance: apiCheckInstanceProperty.optional,\n\t    apiCheckFunction: apiCheckFunctionProperty.optional,\n\t    apiCheckOptions: apiCheck.object.optional\n\t  }).strict;\n\t\n\t  var fieldOptionsApiShape = {\n\t    type: apiCheck.shape.ifNot([\"template\", \"templateUrl\"], apiCheck.string).optional,\n\t    template: apiCheck.shape.ifNot([\"type\", \"templateUrl\"], apiCheck.string).optional,\n\t    templateUrl: apiCheck.shape.ifNot([\"type\", \"template\"], apiCheck.string).optional,\n\t    key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]),\n\t    model: apiCheck.object.optional,\n\t    expressionProperties: apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t      expression: formlyExpression,\n\t      message: formlyExpression.optional\n\t    }).strict])).optional,\n\t    data: apiCheck.object.optional,\n\t    templateOptions: apiCheck.object.optional,\n\t    wrapper: specifyWrapperType.optional,\n\t    modelOptions: apiCheck.shape({\n\t      updateOn: apiCheck.string.optional,\n\t      debounce: apiCheck.oneOfType([apiCheck.object, apiCheck.string]).optional,\n\t      allowInvalid: apiCheck.bool.optional,\n\t      getterSetter: apiCheck.bool.optional,\n\t      timezone: apiCheck.string.optional\n\t    }).optional,\n\t    watcher: apiCheck.typeOrArrayOf(apiCheck.shape({\n\t      expression: formlyExpression.optional,\n\t      listener: formlyExpression\n\t    })).optional,\n\t    validators: apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t      expression: formlyExpression,\n\t      message: formlyExpression.optional\n\t    }).strict])).optional,\n\t    noFormControl: apiCheck.bool.optional,\n\t    hide: apiCheck.bool.optional,\n\t    ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n\t      expression: apiCheck.shape.ifNot([\"value\", \"attribute\", \"bound\"], apiCheck.any).optional,\n\t      value: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional,\n\t      attribute: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional,\n\t      bound: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional\n\t    }).strict).optional,\n\t    optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t    link: apiCheck.func.optional,\n\t    controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n\t    validation: apiCheck.shape({\n\t      show: apiCheck.oneOfType([apiCheck.bool, apiCheck.oneOf([null])]).optional,\n\t      messages: apiCheck.objectOf(apiCheck.func).optional,\n\t      errorExistsAndShouldBeVisible: apiCheck.bool.optional\n\t    }).optional,\n\t    formControl: apiCheck.object.optional,\n\t    value: apiCheck.func.optional,\n\t    runExpressions: apiCheck.func.optional\n\t  };\n\t\n\t  var formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\t\n\t  var typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape);\n\t  typeOptionsDefaultOptions.key = apiCheck.string.optional;\n\t\n\t  var formlyTypeOptions = apiCheck.shape({\n\t    name: apiCheck.string,\n\t    template: apiCheck.shape.ifNot(\"templateUrl\", apiCheck.string).optional,\n\t    templateUrl: apiCheck.shape.ifNot(\"template\", apiCheck.string).optional,\n\t    controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n\t    link: apiCheck.func.optional,\n\t    defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n\t    \"extends\": apiCheck.string.optional,\n\t    wrapper: specifyWrapperType.optional,\n\t    data: apiCheck.object.optional,\n\t    validateOptions: apiCheck.func.optional,\n\t    apiCheck: apiCheckProperty.optional,\n\t    apiCheckInstance: apiCheckInstanceProperty.optional,\n\t    apiCheckFunction: apiCheckFunctionProperty.optional,\n\t    apiCheckOptions: apiCheck.object.optional,\n\t    overwriteOk: apiCheck.bool.optional\n\t  }).strict;\n\t\n\t  angular.extend(apiCheck, {\n\t    formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType\n\t  });\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\tvar utils = __webpack_require__(3);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyConfig\", formlyConfig);\n\t\n\t  formlyConfig.tests = false ? require(\"./formlyConfig.test\")(ngModule) : null;\n\t\n\t  function formlyConfig(formlyUsabilityProvider, formlyApiCheck) {\n\t    var _this2 = this;\n\t\n\t    var typeMap = {};\n\t    var templateWrappersMap = {};\n\t    var defaultWrapperName = \"default\";\n\t    var _this = this;\n\t    var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t    angular.extend(this, {\n\t      setType: setType,\n\t      getType: getType,\n\t      setWrapper: setWrapper,\n\t      getWrapper: getWrapper,\n\t      getWrapperByType: getWrapperByType,\n\t      removeWrapperByName: removeWrapperByName,\n\t      removeWrappersForType: removeWrappersForType,\n\t      disableWarnings: false,\n\t      extras: {\n\t        disableNgModelAttrsManipulator: false,\n\t        ngModelAttrsManipulatorPreferBound: false\n\t      },\n\t      templateManipulators: {\n\t        preWrapper: [],\n\t        postWrapper: []\n\t      },\n\t      $get: function () {\n\t        return _this2;\n\t      }\n\t    });\n\t\n\t    function setType(options) {\n\t      if (angular.isArray(options)) {\n\t        angular.forEach(options, setType);\n\t      } else if (angular.isObject(options)) {\n\t        checkType(options);\n\t        if (options[\"extends\"]) {\n\t          extendTypeOptions(options);\n\t        }\n\t        typeMap[options.name] = options;\n\t      } else {\n\t        throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n\t      }\n\t    }\n\t\n\t    function checkType(options) {\n\t      formlyApiCheck[\"throw\"](formlyApiCheck.formlyTypeOptions, arguments, {\n\t        prefix: \"formlyConfig.setType\",\n\t        url: \"settype-validation-failed\"\n\t      });\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, typeMap, options, \"types\");\n\t      } else {\n\t        options.overwriteOk = undefined;\n\t      }\n\t    }\n\t\n\t    function extendTypeOptions(options) {\n\t      var extendsType = getType(options[\"extends\"], true, options);\n\t      extendTypeControllerFunction(options, extendsType);\n\t      extendTypeLinkFunction(options, extendsType);\n\t      extendTypeValidateOptionsFunction(options, extendsType);\n\t      extendTypeDefaultOptions(options, extendsType);\n\t      utils.reverseDeepMerge(options, extendsType);\n\t    }\n\t\n\t    function extendTypeControllerFunction(options, extendsType) {\n\t      var extendsCtrl = extendsType.controller;\n\t      if (!angular.isDefined(extendsCtrl)) {\n\t        return;\n\t      }\n\t      var optionsCtrl = options.controller;\n\t      if (angular.isDefined(optionsCtrl)) {\n\t        options.controller = function ($scope, $controller) {\n\t          $controller(extendsCtrl, { $scope: $scope });\n\t          $controller(optionsCtrl, { $scope: $scope });\n\t        };\n\t        options.controller.$inject = [\"$scope\", \"$controller\"];\n\t      } else {\n\t        options.controller = extendsCtrl;\n\t      }\n\t    }\n\t\n\t    function extendTypeLinkFunction(options, extendsType) {\n\t      var extendsFn = extendsType.link;\n\t      if (!angular.isDefined(extendsFn)) {\n\t        return;\n\t      }\n\t      var optionsFn = options.link;\n\t      if (angular.isDefined(optionsFn)) {\n\t        options.link = function () {\n\t          extendsFn.apply(undefined, arguments);\n\t          optionsFn.apply(undefined, arguments);\n\t        };\n\t      } else {\n\t        options.link = extendsFn;\n\t      }\n\t    }\n\t\n\t    function extendTypeValidateOptionsFunction(options, extendsType) {\n\t      var extendsFn = extendsType.validateOptions;\n\t      if (!angular.isDefined(extendsFn)) {\n\t        return;\n\t      }\n\t      var optionsFn = options.validateOptions;\n\t      var originalDefaultOptions = options.defaultOptions;\n\t      if (angular.isDefined(optionsFn)) {\n\t        options.validateOptions = function (options) {\n\t          optionsFn(options);\n\t          var mergedOptions = angular.copy(options);\n\t          var defaultOptions = originalDefaultOptions;\n\t          if (defaultOptions) {\n\t            if (angular.isFunction(defaultOptions)) {\n\t              defaultOptions = defaultOptions(mergedOptions);\n\t            }\n\t            utils.reverseDeepMerge(mergedOptions, defaultOptions);\n\t          }\n\t          extendsFn(mergedOptions);\n\t        };\n\t      } else {\n\t        options.validateOptions = extendsFn;\n\t      }\n\t    }\n\t\n\t    function extendTypeDefaultOptions(options, extendsType) {\n\t      var extendsDO = extendsType.defaultOptions;\n\t      if (!angular.isDefined(extendsDO)) {\n\t        return;\n\t      }\n\t      var optionsDO = options.defaultOptions;\n\t      var optionsDOIsFn = angular.isFunction(optionsDO);\n\t      var extendsDOIsFn = angular.isFunction(extendsDO);\n\t      if (extendsDOIsFn) {\n\t        options.defaultOptions = function defaultOptions(options) {\n\t          var extendsDefaultOptions = extendsDO(options);\n\t          var mergedDefaultOptions = {};\n\t          utils.reverseDeepMerge(mergedDefaultOptions, options, extendsDefaultOptions);\n\t          var extenderOptionsDefaultOptions = optionsDO;\n\t          if (optionsDOIsFn) {\n\t            extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);\n\t          }\n\t          utils.reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n\t          return extendsDefaultOptions;\n\t        };\n\t      } else if (optionsDOIsFn) {\n\t        options.defaultOptions = function defaultOptions(options) {\n\t          var newDefaultOptions = {};\n\t          utils.reverseDeepMerge(newDefaultOptions, options, extendsDO);\n\t          return optionsDO(newDefaultOptions);\n\t        };\n\t      }\n\t    }\n\t\n\t    function getType(name, throwError, errorContext) {\n\t      if (!name) {\n\t        return undefined;\n\t      }\n\t      var type = typeMap[name];\n\t      if (!type && throwError === true) {\n\t        throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n\t      } else {\n\t        return type;\n\t      }\n\t    }\n\t\n\t    function setWrapper(_x, _x2) {\n\t      var _again = true;\n\t\n\t      _function: while (_again) {\n\t        _again = false;\n\t        var options = _x,\n\t            name = _x2;\n\t\n\t        if (angular.isArray(options)) {\n\t          return options.map(function (wrapperOptions) {\n\t            return setWrapper(wrapperOptions);\n\t          });\n\t        } else if (angular.isObject(options)) {\n\t          options.types = getOptionsTypes(options);\n\t          options.name = getOptionsName(options, name);\n\t          checkWrapperAPI(options);\n\t          templateWrappersMap[options.name] = options;\n\t          return options;\n\t        } else if (angular.isString(options)) {\n\t          _x = {\n\t            template: options,\n\t            name: name\n\t          };\n\t          _again = true;\n\t          continue _function;\n\t        }\n\t      }\n\t    }\n\t\n\t    function getOptionsTypes(options) {\n\t      if (angular.isString(options.types)) {\n\t        return [options.types];\n\t      }\n\t      if (!angular.isDefined(options.types)) {\n\t        return [];\n\t      } else {\n\t        return options.types;\n\t      }\n\t    }\n\t\n\t    function getOptionsName(options, name) {\n\t      return options.name || name || options.types.join(\" \") || defaultWrapperName;\n\t    }\n\t\n\t    function checkWrapperAPI(options) {\n\t      formlyUsabilityProvider.checkWrapper(options);\n\t      if (options.template) {\n\t        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t      }\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n\t      } else {\n\t        delete options.overwriteOk;\n\t      }\n\t      checkWrapperTypes(options);\n\t    }\n\t\n\t    function checkWrapperTypes(options) {\n\t      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n\t      if (shouldThrow) {\n\t        throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n\t      }\n\t    }\n\t\n\t    function checkOverwrite(property, object, newValue, objectName) {\n\t      if (object.hasOwnProperty(property)) {\n\t        warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n\t      }\n\t    }\n\t\n\t    function getWrapper(name) {\n\t      return templateWrappersMap[name || defaultWrapperName];\n\t    }\n\t\n\t    function getWrapperByType(type) {\n\t      /* jshint maxcomplexity:6 */\n\t      var wrappers = [];\n\t      for (var name in templateWrappersMap) {\n\t        if (templateWrappersMap.hasOwnProperty(name)) {\n\t          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n\t            wrappers.push(templateWrappersMap[name]);\n\t          }\n\t        }\n\t      }\n\t      return wrappers;\n\t    }\n\t\n\t    function removeWrapperByName(name) {\n\t      var wrapper = templateWrappersMap[name];\n\t      delete templateWrappersMap[name];\n\t      return wrapper;\n\t    }\n\t\n\t    function removeWrappersForType(type) {\n\t      var wrappers = getWrapperByType(type);\n\t      if (!wrappers) {\n\t        return;\n\t      }\n\t      if (!angular.isArray(wrappers)) {\n\t        return removeWrapperByName(wrappers.name);\n\t      } else {\n\t        wrappers.forEach(function (wrapper) {\n\t          return removeWrapperByName(wrapper.name);\n\t        });\n\t        return wrappers;\n\t      }\n\t    }\n\t\n\t    function warn() {\n\t      if (!_this.disableWarnings) {\n\t        console.warn.apply(console, arguments);\n\t      }\n\t    }\n\t  }\n\t  formlyConfig.$inject = [\"formlyUsabilityProvider\", \"formlyApiCheck\"];\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/blob/\" + (\"5.0.3\") + \"/other/ERRORS_AND_WARNINGS.md#\");\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyUsability\", [\"formlyVersion\", \"formlyApiCheck\", function (formlyVersion, formlyApiCheck) {\n\t    var _this = this;\n\t\n\t    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/blob/\" + formlyVersion + \"/other/ERRORS_AND_WARNINGS.md#\";\n\t    angular.extend(this, {\n\t      getFormlyError: getFormlyError,\n\t      getFieldError: getFieldError,\n\t      checkWrapper: checkWrapper,\n\t      checkWrapperTemplate: checkWrapperTemplate,\n\t      $get: function () {\n\t        return _this;\n\t      }\n\t    });\n\t\n\t    function getFieldError(errorInfoSlug, message, field) {\n\t      if (arguments.length < 3) {\n\t        field = message;\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n\t    }\n\t\n\t    function getFormlyError(errorInfoSlug, message) {\n\t      if (!message) {\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message));\n\t    }\n\t\n\t    function getErrorMessage(errorInfoSlug, message) {\n\t      var url = \"\";\n\t      if (errorInfoSlug !== null) {\n\t        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t      }\n\t      return \"Formly Error: \" + message + \". \" + url;\n\t    }\n\t\n\t    function checkWrapper(wrapper) {\n\t      formlyApiCheck[\"throw\"](formlyApiCheck.formlyWrapperType, arguments, {\n\t        prefix: \"formlyConfig.setWrapper\",\n\t        urlSuffix: \"setwrapper-validation-failed\"\n\t      });\n\t    }\n\t\n\t    function checkWrapperTemplate(template, additionalInfo) {\n\t      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n\t      if (template.indexOf(formlyTransclude) === -1) {\n\t        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n\t      }\n\t    }\n\t  }]);\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyValidationMessages\", function () {\n\t\n\t    var formlyValidationMessages = {\n\t      addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t      addStringMessage: addStringMessage,\n\t      messages: {}\n\t    };\n\t\n\t    return formlyValidationMessages;\n\t\n\t    function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t      formlyValidationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t    }\n\t\n\t    function addStringMessage(name, string) {\n\t      formlyValidationMessages.messages[name] = function () {\n\t        return string;\n\t      };\n\t    }\n\t\n\t    function templateOptionValue(prop, prefix, suffix, alternate) {\n\t      return function getValidationMessage(viewValue, modelValue, scope) {\n\t        if (scope.options.templateOptions[prop]) {\n\t          return \"\" + prefix + \" \" + scope.options.templateOptions[prop] + \" \" + suffix;\n\t        } else {\n\t          return alternate;\n\t        }\n\t      };\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyVersion\", (\"5.0.3\"));\n\t};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(11)(ngModule);\n\t  __webpack_require__(14)(ngModule);\n\t  __webpack_require__(12)(ngModule);\n\t  __webpack_require__(16)(ngModule);\n\t  __webpack_require__(13)(ngModule);\n\t  __webpack_require__(15)(ngModule);\n\t};\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.run(addCustomTags);\n\t\n\t  function addCustomTags($document) {\n\t\n\t    if ($document && $document.get) {\n\t      //IE8 check ->\n\t      // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203\n\t      var document = $document.get(0);\n\t      var div = document.createElement(\"div\");\n\t      div.innerHTML = \"<!--[if lt IE 9]><i></i><![endif]-->\";\n\t      var isIeLessThan9 = div.getElementsByTagName(\"i\").length === 1;\n\t\n\t      if (isIeLessThan9) {\n\t        //add the custom elements that we need for formly\n\t        var customElements = [\"formly-field\", \"formly-form\", \"formly-custom-validation\", \"formly-focus\", \"formly-transpose\"];\n\t\n\t        for (var i = 0; i < customElements.length; i++) {\n\t          document.createElement(customElements[i]);\n\t        }\n\t      }\n\t    }\n\t  }\n\t  addCustomTags.$inject = [\"$document\"];\n\t};\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.run(addFormlyNgModelAttrsManipulator);\n\t\n\t  function addFormlyNgModelAttrsManipulator(formlyConfig) {\n\t    if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t      return;\n\t    }\n\t    formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\t\n\t    function ngModelAttrsManipulator(template, options, scope) {\n\t      /* jshint maxcomplexity:7 */\n\t      var el = angular.element(\"<a></a>\");\n\t      var data = options.data;\n\t      if (data.noTouchy) {\n\t        return template;\n\t      }\n\t      el.append(template);\n\t      var modelEls = angular.element(el[0].querySelectorAll(\"[ng-model]\"));\n\t      if (!modelEls || !modelEls.length) {\n\t        return template;\n\t      }\n\t\n\t      addIfNotPresent(modelEls, \"id\", scope.id);\n\t      addIfNotPresent(modelEls, \"name\", scope.id);\n\t\n\t      if (angular.isDefined(options.validators)) {\n\t        addIfNotPresent(modelEls, \"formly-custom-validation\", \"options.validators\");\n\t      }\n\t      if (angular.isDefined(options.modelOptions)) {\n\t        addIfNotPresent(modelEls, \"ng-model-options\", \"options.modelOptions\");\n\t        if (options.modelOptions.getterSetter) {\n\t          modelEls.attr(\"ng-model\", \"options.value\");\n\t        }\n\t      }\n\t      addTemplateOptionsAttrs();\n\t\n\t      return el.html();\n\t\n\t      function addTemplateOptionsAttrs() {\n\t        if (!options.templateOptions && !options.expressionProperties) {\n\t          // no need to run these if there are no templateOptions or expressionProperties\n\t          return;\n\t        }\n\t        var to = options.templateOptions || {};\n\t        var ep = options.expressionProperties || {};\n\t\n\t        var ngModelAttributes = getBuiltinAttributes();\n\t\n\t        // extend with the user's specifications winning\n\t        angular.extend(ngModelAttributes, options.ngModelAttrs);\n\t\n\t        angular.forEach(ngModelAttributes, function (val, name) {\n\t          /* jshint maxcomplexity:10 */\n\t          var attrVal = undefined;\n\t          var attrName = undefined;\n\t          var ref = \"options.templateOptions['\" + name + \"']\";\n\t          var toVal = to[name];\n\t          var epVal = getEpValue(ep, name);\n\t\n\t          var inTo = angular.isDefined(toVal);\n\t          var inEp = angular.isDefined(epVal);\n\t          if (val.value) {\n\t            // I realize this looks backwards, but it's right, trust me...\n\t            attrName = val.value;\n\t            attrVal = name;\n\t          } else if (val.expression && inTo) {\n\t            attrName = val.expression;\n\t            if (angular.isString(to[name])) {\n\t              attrVal = \"$eval(\" + ref + \")\";\n\t            } else if (angular.isFunction(to[name])) {\n\t              attrVal = \"\" + ref + \"(model[options.key], options, this, $event)\";\n\t            } else {\n\t              throw new Error(\"options.templateOptions.\" + name + \" must be a string or function: \" + JSON.stringify(options));\n\t            }\n\t          } else if (val.bound && inEp) {\n\t            attrName = val.bound;\n\t            attrVal = ref;\n\t          } else if (val.attribute && inEp) {\n\t            attrName = val.attribute;\n\t            attrVal = \"{{\" + ref + \"}}\";\n\t          } else if (val.attribute && inTo) {\n\t            attrName = val.attribute;\n\t            attrVal = toVal;\n\t          } else if (val.bound && inTo) {\n\t            attrName = val.bound;\n\t            attrVal = ref;\n\t          }\n\t          if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n\t            addIfNotPresent(modelEls, attrName, attrVal);\n\t          }\n\t        });\n\t      }\n\t\n\t      function getBuiltinAttributes() {\n\t        var ngModelAttributes = {\n\t          focus: {\n\t            attribute: \"formly-focus\"\n\t          }\n\t        };\n\t        var boundOnly = [];\n\t        var bothAttributeAndBound = [\"required\", \"disabled\", \"pattern\", \"minlength\"];\n\t        var expressionOnly = [\"change\", \"keydown\", \"keyup\", \"keypress\", \"click\", \"focus\", \"blur\"];\n\t        var attributeOnly = [\"placeholder\", \"min\", \"max\", \"tabindex\", \"type\"];\n\t        if (formlyConfig.extras.ngModelAttrsManipulatorPreferBound) {\n\t          boundOnly.push(\"maxlength\");\n\t        } else {\n\t          bothAttributeAndBound.push(\"maxlength\");\n\t        }\n\t\n\t        angular.forEach(boundOnly, function (item) {\n\t          ngModelAttributes[item] = { bound: \"ng-\" + item };\n\t        });\n\t\n\t        angular.forEach(bothAttributeAndBound, function (item) {\n\t          ngModelAttributes[item] = { attribute: item, bound: \"ng-\" + item };\n\t        });\n\t\n\t        angular.forEach(expressionOnly, function (item) {\n\t          var propName = \"on\" + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t          ngModelAttributes[propName] = { expression: \"ng-\" + item };\n\t        });\n\t\n\t        angular.forEach(attributeOnly, function (item) {\n\t          ngModelAttributes[item] = { attribute: item };\n\t        });\n\t        return ngModelAttributes;\n\t      }\n\t\n\t      function getEpValue(ep, name) {\n\t        return ep[\"templateOptions.\" + name] || ep[\"templateOptions['\" + name + \"']\"] || ep[\"templateOptions[\\\"\" + name + \"\\\"]\"];\n\t      }\n\t\n\t      function addIfNotPresent(el, attr, val) {\n\t        if (!el.attr(attr)) {\n\t          el.attr(attr, val);\n\t        }\n\t      }\n\t    }\n\t  }\n\t  addFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\"];\n\t};\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(19)(ngModule);\n\t  __webpack_require__(18)(ngModule);\n\t};\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar utils = __webpack_require__(3);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyUtil\", formlyUtil);\n\t\n\t  formlyUtil.tests = false ? require(\"./formlyUtil.test\")(ngModule) : null;\n\t\n\t  function formlyUtil() {\n\t    return utils;\n\t  }\n\t};\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t    return function warn() {\n\t      if (!formlyConfig.disableWarnings) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var warnInfoSlug = args.shift();\n\t        args.unshift(\"Formly Warning:\");\n\t        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t        $log.warn.apply($log, _toConsumableArray(args));\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(21)(ngModule);\n\t  __webpack_require__(22)(ngModule);\n\t};\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_24__;\n\n/***/ }\n/******/ ])\n});\n\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8e9368990271b6508199\n **/","module.exports = require('./index.common');\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./index.js\n **/","// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require('angular');\nif (!angular.version) {\n  angular = window.angular;\n}\nmodule.exports = angular;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./angular-fix/index.js\n **/","const angular = require('angular-fix');\n\nexport default {formlyEval, getFieldId, reverseDeepMerge, findByNodeName};\n\nfunction formlyEval(scope, expression, modelValue, viewValue) {\n  if (angular.isFunction(expression)) {\n    return expression(viewValue || modelValue, modelValue, scope);\n  } else {\n    return scope.$eval(expression, {\n      $viewValue: viewValue || modelValue,\n      $modelValue: modelValue\n    });\n  }\n}\n\nfunction getFieldId(formId, options, index) {\n  var type = options.type;\n  if (!type && options.template) {\n    type = 'template';\n  } else if (!type && options.templateUrl) {\n    type = 'templateUrl';\n  }\n\n  return [formId, type, options.key, index].join('_');\n}\n\n\nfunction reverseDeepMerge(dest) {\n  angular.forEach(arguments, (src, index) => {\n    if (!index) {\n      return;\n    }\n    angular.forEach(src, (val, prop) => {\n      if (!angular.isDefined(dest[prop])) {\n        dest[prop] = angular.copy(val);\n      } else if (objAndSameType(dest[prop], val)) {\n        reverseDeepMerge(dest[prop], val);\n      }\n    });\n  });\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return angular.isObject(obj1) && angular.isObject(obj2) &&\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n}\n\n//recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\nfunction findByNodeName(el, nodeName) {\n  if (!el.prop) { // not a jQuery or jqLite object -> wrap it\n    el = angular.element(el);\n  }\n\n  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n    return el;\n  }\n\n  var c = el.children();\n  for(var i = 0; c && i < c.length; i++) {\n    var node = findByNodeName(c[i], nodeName);\n    if (node) {\n      return node;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./other/utils.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = ngModule => {\n  ngModule.directive('formlyCustomValidation', formlyCustomValidation);\n\n  formlyCustomValidation.tests = ON_TEST ? require('./formly-custom-validation.test')(ngModule) : null;\n\n  function formlyCustomValidation(formlyUtil, $q) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, el, attrs, ctrl) {\n        var validators = scope.$eval(attrs.formlyCustomValidation);\n        if (!validators) {\n          return;\n        }\n        checkValidators(validators);\n        scope.options.validation.messages = scope.options.validation.messages || {};\n\n\n        var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n        angular.forEach(validators, function(validator, name) {\n          var message = validator.message;\n          if (message) {\n            scope.options.validation.messages[name] = () => {\n              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n            };\n          }\n          validator = angular.isObject(validator) ? validator.expression : validator;\n          var isPossiblyAsync = !angular.isString(validator);\n          if (useNewValidatorsApi) {\n            setupWithValidators();\n          } else {\n            setupWithParsers();\n          }\n\n          function setupWithValidators() {\n            var validatorCollection = isPossiblyAsync ? '$asyncValidators' : '$validators';\n            ctrl[validatorCollection][name] = function(modelValue, viewValue) {\n              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n              if (isPossiblyAsync) {\n                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n              } else {\n                return value;\n              }\n            };\n          }\n\n          function setupWithParsers() {\n            let inFlightValidator;\n            ctrl.$parsers.unshift(function(viewValue) {\n              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n              if (isPromiseLike(isValid)) {\n                ctrl.$pending = ctrl.$pending || {};\n                ctrl.$pending[name] = true;\n                inFlightValidator = isValid;\n                isValid.then(() => {\n                  if (inFlightValidator === isValid) {\n                    ctrl.$setValidity(name, true);\n                  }\n                }).catch(() => {\n                  if (inFlightValidator === isValid) {\n                    ctrl.$setValidity(name, false);\n                  }\n                }).finally(() => {\n                  if (Object.keys(ctrl.$pending).length === 1) {\n                    delete ctrl.$pending;\n                  } else {\n                    delete ctrl.$pending[name];\n                  }\n                });\n              } else {\n                ctrl.$setValidity(name, isValid);\n              }\n              return viewValue;\n            });\n          }\n        });\n      }\n    };\n\n    function isPromiseLike(obj) {\n      return obj && angular.isFunction(obj.then);\n    }\n\n    function checkValidators(validators) {\n      var allowedProperties = ['expression', 'message'];\n      var validatorsWithExtraProps = {};\n      angular.forEach(validators, (validator, name) => {\n        if (angular.isString(validator)) {\n          return;\n        }\n        var extraProps = [];\n        angular.forEach(validator, (v, key) => {\n          if (allowedProperties.indexOf(key) === -1) {\n            extraProps.push(key);\n          }\n        });\n        if (extraProps.length) {\n          validatorsWithExtraProps[name] = extraProps;\n        }\n      });\n      if (Object.keys(validatorsWithExtraProps).length) {\n        throw new Error([\n          `Validators are only allowed to be functions or objects that have ${allowedProperties.join(', ')}.`,\n          `You provided some extra properties: ${JSON.stringify(validatorsWithExtraProps)}`\n        ].join(' '));\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-custom-validation.js\n **/","let angular = require('angular-fix');\n\nmodule.exports = ngModule => {\n  ngModule.directive('formlyField', formlyField);\n\n  formlyField.tests = ON_TEST ? require('./formly-field.test')(ngModule) : null;\n\n  /**\n   * @ngdoc directive\n   * @name formlyField\n   * @restrict AE\n   */\n  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyApiCheck,\n                       formlyUtil, formlyUsability, formlyWarn) {\n    return {\n      restrict: 'AE',\n      transclude: true,\n      scope: {\n        options: '=',\n        model: '=',\n        formId: '@',\n        index: '=?',\n        fields: '=?',\n        formState: '=?',\n        form: '=?'\n      },\n      controller: function fieldController($scope, $timeout, $parse, $controller) {\n        var opts = $scope.options;\n        var fieldType = opts.type && formlyConfig.getType(opts.type);\n        simplifyLife(opts);\n        mergeFieldOptionsWithTypeDefaults(opts, fieldType);\n        extendOptionsWithDefaults(opts, $scope.index);\n        checkApi(opts);\n        // set field id to link labels and fields\n        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);\n\n        // initalization\n        runExpressions();\n        setFormControl($scope, opts);\n        addModelWatcher($scope, opts);\n        addValidationMessages(opts);\n        // simplify things\n        // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n        $scope.to = $scope.options.templateOptions;\n        invokeControllers($scope, opts, fieldType);\n\n        // function definitions\n        function runExpressions() {\n          $timeout(function() { // must run on next tick to make sure that the current value is correct.\n            var field = $scope.options;\n            var currentValue = valueGetterSetter();\n            angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n              var setter = $parse(prop).assign;\n              var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n              promise.then(function(value) {\n                setter(field, value);\n              });\n            });\n          });\n        }\n\n        function valueGetterSetter(newVal) {\n          if (!$scope.model || !$scope.options.key) {\n            return;\n          }\n          if (angular.isDefined(newVal)) {\n            $scope.model[$scope.options.key] = newVal;\n          }\n          return $scope.model[$scope.options.key];\n        }\n\n        function simplifyLife(options) {\n          // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n          formlyUtil.reverseDeepMerge(options, {\n            data: {},\n            templateOptions: {},\n            validation: {}\n          });\n        }\n\n        function mergeFieldOptionsWithTypeDefaults(options, type) {\n          if (type) {\n            mergeOptions(options, type.defaultOptions);\n          }\n          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n          angular.forEach(properOrder, typeName => {\n            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n          });\n        }\n\n        function mergeOptions(options, extraOptions) {\n          if (extraOptions) {\n            if (angular.isFunction(extraOptions)) {\n              extraOptions = extraOptions(options);\n            }\n            formlyUtil.reverseDeepMerge(options, extraOptions);\n          }\n        }\n\n        function extendOptionsWithDefaults(options, index) {\n          angular.extend(options, {\n            // attach the key in case the formly-field directive is used directly\n            key: options.key || index || 0,\n            value: valueGetterSetter,\n            runExpressions: runExpressions\n          });\n        }\n\n        // initialization functions\n        function setFormControl(scope, options) {\n          if (options.noFormControl) {\n            return;\n          }\n          scope.$watch('form[\"' + scope.id + '\"]', function(formControl) {\n            if (formControl) {\n              scope.fc = formControl; // shortcut for template authors\n              scope.options.formControl = formControl;\n              addShowMessagesWatcher(scope, options);\n            }\n          });\n        }\n\n        function addModelWatcher(scope, options) {\n          if (options.model) {\n            scope.$watch('options.model', runExpressions, true);\n          }\n        }\n\n        function addShowMessagesWatcher(scope, options) {\n          scope.$watch(function() {\n            if (typeof scope.options.validation.show === 'boolean') {\n              return scope.fc.$invalid && scope.options.validation.show;\n            } else {\n              return scope.fc.$invalid && scope.fc.$touched;\n            }\n          }, function(show) {\n            options.validation.errorExistsAndShouldBeVisible = show;\n            scope.showError = show; // shortcut for template authors\n          });\n        }\n\n        function addValidationMessages(options) {\n          options.validation.messages = options.validation.messages || {};\n          angular.forEach(formlyValidationMessages.messages, function (expression, name) {\n            if (!options.validation.messages[name]) {\n              options.validation.messages[name] = function (viewValue, modelValue, scope) {\n                return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n              };\n            }\n          });\n        }\n\n        function invokeControllers(scope, options = {}, type = {}) {\n          angular.forEach([type.controller, options.controller], controller => {\n            if (controller) {\n              $controller(controller, {$scope: scope});\n            }\n          });\n        }\n      },\n      link: function fieldLink(scope, el) {\n        var type = scope.options.type && formlyConfig.getType(scope.options.type);\n        var args = arguments;\n        var thusly = this;\n        getFieldTemplate(scope.options)\n          .then(runManipulators(formlyConfig.templateManipulators.preWrapper))\n          .then(transcludeInWrappers(scope.options))\n          .then(runManipulators(formlyConfig.templateManipulators.postWrapper))\n          .then(setElementTemplate)\n          .catch(error => {\n            formlyWarn(\n              'there-was-a-problem-setting-the-template-for-this-field',\n              'There was a problem setting the template for this field ',\n              scope.options,\n              error\n            );\n          });\n\n        function setElementTemplate(templateEl) {\n          el.html(asHtml(templateEl));\n          $compile(el.contents())(scope);\n          if (type && type.link) {\n            type.link.apply(thusly, args);\n          }\n          if (scope.options.link) {\n            scope.options.link.apply(thusly, args);\n          }\n        }\n\n        function runManipulators(manipulators) {\n          return function runManipulatorsOnTemplate(template) {\n            var chain = $q.when(template);\n            angular.forEach(manipulators, manipulator => {\n              chain = chain.then(template => {\n                return $q.when(manipulator(template, scope.options, scope)).then(newTemplate => {\n                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n                });\n              });\n            });\n            return chain;\n          };\n        }\n      }\n    };\n\n    function asHtml(el) {\n      var wrapper = angular.element('<a></a>');\n      return wrapper.append(el).html();\n    }\n\n    function getFieldTemplate(options) {\n      let type = formlyConfig.getType(options.type, true, options);\n      let template = options.template || type && type.template;\n      let templateUrl = options.templateUrl || type && type.templateUrl;\n      if (!template && !templateUrl) {\n        throw formlyUsability.getFieldError(\n          'type-type-has-no-template',\n          `Type '${options.type}' has not template. On element:`, options\n        );\n      }\n      return getTemplate(template || templateUrl, !template);\n    }\n\n\n    function getTemplate(template, isUrl) {\n      if (!isUrl) {\n        return $q.when(template);\n      } else {\n        let httpOptions = {cache: $templateCache};\n        return $http.get(template, httpOptions).then(function(response) {\n          return response.data;\n        }).catch(function(error) {\n          formlyWarn(\n            'problem-loading-template-for-templateurl',\n            'Problem loading template for ' + template,\n            error\n          );\n        });\n      }\n    }\n\n    function transcludeInWrappers(options) {\n      let wrapper = getWrapperOption(options);\n\n      return function transcludeTemplate(template) {\n        if (!wrapper.length) {\n          return $q.when(template);\n        }\n\n        wrapper.forEach((wrapper) => {\n          formlyUsability.checkWrapper(wrapper, options);\n          wrapper.validateOptions && wrapper.validateOptions(options);\n          runApiCheck(wrapper, options);\n        });\n        let promises = wrapper.map(w => getTemplate(w.template || w.templateUrl, !w.template));\n        return $q.all(promises).then(wrappersTemplates => {\n          wrappersTemplates.forEach((wrapperTemplate, index) => {\n            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n          });\n          wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n          let totalWrapper = wrappersTemplates.shift();\n          wrappersTemplates.forEach(wrapperTemplate => {\n            totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n          });\n          return doTransclusion(totalWrapper, template);\n        });\n      };\n    }\n\n    function doTransclusion(wrapper, template) {\n      let superWrapper = angular.element('<a></a>'); // this allows people not have to have a single root in wrappers\n      superWrapper.append(wrapper);\n      let transcludeEl = superWrapper.find('formly-transclude');\n      if (!transcludeEl.length) {\n        //try it using our custom find function\n        transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n      }\n      transcludeEl.replaceWith(template);\n      return superWrapper.html();\n    }\n\n    function getWrapperOption(options) {\n      let wrapper = options.wrapper;\n      // explicit null means no wrapper\n      if (wrapper === null) {\n        return [];\n      }\n\n      // nothing specified means use the default wrapper for the type\n      if (!wrapper) {\n        // get all wrappers that specify they apply to this type\n        wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n      } else {\n        wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n      }\n\n      // get all wrappers for that this type specified that it uses.\n      var type = formlyConfig.getType(options.type, true, options);\n      if (type && type.wrapper) {\n        let typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n        wrapper = wrapper.concat(typeWrappers);\n      }\n\n      // add the default wrapper last\n      var defaultWrapper = formlyConfig.getWrapper();\n      if (defaultWrapper) {\n        wrapper.push(defaultWrapper);\n      }\n      return wrapper;\n    }\n\n    function checkApi(options) {\n      formlyApiCheck.throw(formlyApiCheck.formlyFieldOptions, arguments, {\n        prefix: 'formly-field directive',\n        url: 'formly-field-directive-validation-failed'\n      });\n      // validate with the type\n      const type = options.type && formlyConfig.getType(options.type);\n      if (type) {\n        if (type.validateOptions) {\n          type.validateOptions(options);\n        }\n        runApiCheck(type, options);\n      }\n    }\n\n    function runApiCheck({apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions}, options) {\n      if (!apiCheck) {\n        return;\n      }\n      const instance = apiCheckInstance || formlyApiCheck;\n      const fn = apiCheckFunction || 'warn';\n      const shape = instance.shape(apiCheck);\n      instance[fn](shape, [options], apiCheckOptions || {\n        prefix: `formly-field ${name}`,\n        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n      });\n    }\n\n  }\n\n  function arrayify(obj) {\n    if (obj && !angular.isArray(obj)) {\n      obj = [obj];\n    } else if (!obj) {\n      obj = [];\n    }\n    return obj;\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-field.js\n **/","module.exports = ngModule => {\n  ngModule.directive('formlyFocus', function($timeout, $document) {\n    /* jshint -W052 */\n    return {\n      restrict: 'A',\n      link: function(scope, element, attrs) {\n        var previousEl = null;\n        var el = element[0];\n        var doc = $document[0];\n        attrs.$observe('formlyFocus', function(value) {\n          if (value === 'true') {\n            $timeout(function() {\n              previousEl = doc.activeElement;\n              el.focus();\n            }, ~~attrs.focusWait);\n          } else if (value === 'false') {\n            if (doc.activeElement === el) {\n              el.blur();\n              if (attrs.hasOwnProperty('refocus') && previousEl) {\n                previousEl.focus();\n              }\n            }\n          }\n        });\n      }\n    };\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-focus.js\n **/","let angular = require('angular-fix');\n\nmodule.exports = ngModule => {\n  ngModule.directive('formlyForm', formlyForm);\n\n  formlyForm.tests = ON_TEST ? require('./formly-form.test')(ngModule) : null;\n\n  /**\n   * @ngdoc directive\n   * @name formlyForm\n   * @restrict E\n   */\n  function formlyForm(formlyUsability, $parse) {\n    var currentFormId = 1;\n    return {\n      restrict: 'E',\n      template: function(el, attrs) {\n        /* jshint -W033 */ // this because jshint is broken I guess...\n        const rootEl = attrs.rootEl || 'ng-form';\n        const formName = `formly_${currentFormId++}`;\n        return `\n          <${rootEl} class=\"formly\"\n                   name=\"${formName}\"\n                   role=\"form\">\n            <div formly-field\n                 ng-repeat=\"field in fields track by $index\"\n                 ng-if=\"!field.hide\"\n                 class=\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\"\n                 options=\"field\"\n                 model=\"field.model || model\"\n                 fields=\"fields\"\n                 form=\"${formName}\"\n                 form-id=\"${formName}\"\n                 form-state=\"options.formState\"\n                 index=\"$index\">\n            </div>\n            <div ng-transclude></div>\n          </${rootEl}>\n        `;\n      },\n      replace: true,\n      transclude: true,\n      scope: {\n        fields: '=',\n        model: '=',\n        form: '=?',\n        options: '=?'\n      },\n      controller: function($scope) {\n        $scope.options = $scope.options || {};\n        $scope.options.formState = $scope.options.formState || {};\n\n        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n        // watch the model and evaluate watch expressions that depend on it.\n        $scope.$watch('model', function onResultUpdate(newResult) {\n          angular.forEach($scope.fields, function(field) {\n            /*jshint -W030 */\n            field.runExpressions && field.runExpressions(newResult);\n          });\n        }, true);\n\n        function attachKey(field, index) {\n          field.key = field.key || index || 0;\n        }\n\n        function setupWatchers(field, index) {\n          if (!angular.isDefined(field.watcher)) {\n            return;\n          }\n          var watchers = field.watcher;\n          if (!angular.isArray(watchers)) {\n            watchers = [watchers];\n          }\n          angular.forEach(watchers, function(watcher) {\n            if (!angular.isDefined(watcher.listener)) {\n              throw formlyUsability.getFieldError(\n                'all-field-watchers-must-have-a-listener',\n                'All field watchers must have a listener', field\n              );\n            }\n            var watchExpression = getWatchExpression(watcher, field, index);\n            var watchListener = getWatchListener(watcher, field, index);\n\n            var type = watcher.type || '$watch';\n            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n          });\n        }\n\n        function getWatchExpression(watcher, field, index) {\n          var watchExpression = watcher.expression || `model['${field.key}']`;\n          if (angular.isFunction(watchExpression)) {\n            // wrap the field's watch expression so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalExpression = watchExpression;\n            watchExpression = function formlyWatchExpression() {\n              var args = modifyArgs(watcher, index, ...arguments);\n              return originalExpression(...args);\n            };\n            watchExpression.displayName = `Formly Watch Expression for field for ${field.key}`;\n          }\n          return watchExpression;\n        }\n\n        function getWatchListener(watcher, field, index) {\n          var watchListener = watcher.listener;\n          if (angular.isFunction(watchListener)) {\n            // wrap the field's watch listener so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalListener = watchListener;\n            watchListener = function formlyWatchListener() {\n              var args = modifyArgs(watcher, index, ...arguments);\n              return originalListener(...args);\n            };\n            watchListener.displayName = `Formly Watch Listener for field for ${field.key}`;\n          }\n          return watchListener;\n        }\n\n        function modifyArgs(watcher, index, ...originalArgs) {\n          return [$scope.fields[index], ...originalArgs, watcher.stopWatching];\n        }\n      },\n      link(scope, el, attrs) {\n        if (attrs.form) {\n          const formId = attrs.name;\n          $parse(attrs.form).assign(scope.$parent, scope[formId]);\n        }\n      }\n    };\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-form.js\n **/","module.exports = ngModule => {\n  require('./formly-custom-validation')(ngModule);\n  require('./formly-field')(ngModule);\n  require('./formly-form')(ngModule);\n  require('./formly-focus')(ngModule);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/index.js\n **/","const apiCheck = require('api-check');\nif (!apiCheck) {\n  throw new Error(\n    'angular-formly requires the library apiCheck.js! Please include it! ' +\n      require('./other/docsBaseUrl') + 'apicheckjs-dependency-required'\n  );\n}\nconst ngModuleName = 'formly';\nconst angular = require('./angular-fix');\nconst ngModule = angular.module(ngModuleName, []);\n\nrequire('./providers')(ngModule);\nrequire('./services')(ngModule);\nrequire('./directives')(ngModule);\nrequire('./run')(ngModule);\n\nmodule.exports = ngModuleName;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./index.common.js\n **/","module.exports = ngModule => {\n\n  let apiCheck = require('api-check')({\n    output: {\n      prefix: 'angular-formly:',\n      docsBaseUrl: require('../other/docsBaseUrl')\n    }\n  });\n\n  function shapeRequiredIfNot(otherProps, propChecker) {\n    if (!angular.isArray(otherProps)) {\n      otherProps = [otherProps];\n    }\n    const type = `specified if these are not specified: \\`${otherProps.join(', ')}\\` (otherwise it's optional)`;\n    function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n      var propExists = obj && obj.hasOwnProperty(propName);\n      var otherPropsExist = otherProps.some(function (otherProp) {\n        return obj && obj.hasOwnProperty(otherProp);\n      });\n      //console.log(propName, propExists, prop, otherPropsExist, otherProps.join(', '));\n      if (!otherPropsExist && !propExists) {\n        return apiCheck.utils.getError(propName, location, type);\n      } else if (propExists) {\n        return propChecker(prop, propName, location, obj);\n      }\n    }\n    shapeRequiredIfNotDefinition.type = type;\n    apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n    return shapeRequiredIfNotDefinition;\n  }\n\n  ngModule.constant('formlyApiCheck', apiCheck);\n  if (ON_TEST) {\n    require('./formlyApiCheck.test')(ngModule);\n  }\n\n  let formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n  let specifyWrapperType = apiCheck.oneOfType([\n    apiCheck.oneOf([null]), apiCheck.typeOrArrayOf(apiCheck.string)\n  ]);\n\n  const apiCheckProperty = apiCheck.objectOf(apiCheck.func);\n\n  const apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n    warn: apiCheck.func,\n    throw: apiCheck.func,\n    shape: apiCheck.func\n  }));\n\n  const apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\n  const formlyWrapperType = apiCheck.shape({\n    name: shapeRequiredIfNot('types', apiCheck.string).optional,\n    template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n    templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n    types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n    overwriteOk: apiCheck.bool.optional,\n    validateOptions: apiCheck.func.optional,\n    apiCheck: apiCheckProperty.optional,\n    apiCheckInstance: apiCheckInstanceProperty.optional,\n    apiCheckFunction: apiCheckFunctionProperty.optional,\n    apiCheckOptions: apiCheck.object.optional\n  }).strict;\n\n  let fieldOptionsApiShape = {\n    type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n    template: apiCheck.shape.ifNot(['type', 'templateUrl'], apiCheck.string).optional,\n    templateUrl: apiCheck.shape.ifNot(['type', 'template'], apiCheck.string).optional,\n    key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]),\n    model: apiCheck.object.optional,\n    expressionProperties: apiCheck.objectOf(apiCheck.oneOfType([\n      formlyExpression,\n      apiCheck.shape({\n        expression: formlyExpression,\n        message: formlyExpression.optional\n      }).strict\n    ])).optional,\n    data: apiCheck.object.optional,\n    templateOptions: apiCheck.object.optional,\n    wrapper: specifyWrapperType.optional,\n    modelOptions: apiCheck.shape({\n      updateOn: apiCheck.string.optional,\n      debounce: apiCheck.oneOfType([\n        apiCheck.object, apiCheck.string\n      ]).optional,\n      allowInvalid: apiCheck.bool.optional,\n      getterSetter: apiCheck.bool.optional,\n      timezone: apiCheck.string.optional\n    }).optional,\n    watcher: apiCheck.typeOrArrayOf(\n      apiCheck.shape({\n        expression: formlyExpression.optional,\n        listener: formlyExpression\n      })\n    ).optional,\n    validators: apiCheck.objectOf(apiCheck.oneOfType([\n      formlyExpression, apiCheck.shape({\n        expression: formlyExpression,\n        message: formlyExpression.optional\n      }).strict\n    ])).optional,\n    noFormControl: apiCheck.bool.optional,\n    hide: apiCheck.bool.optional,\n    ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n      expression: apiCheck.shape.ifNot(['value', 'attribute', 'bound'], apiCheck.any).optional,\n      value: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n      attribute: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n      bound: apiCheck.shape.ifNot('expression', apiCheck.any).optional\n    }).strict).optional,\n    optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n    link: apiCheck.func.optional,\n    controller: apiCheck.oneOfType([\n      apiCheck.string, apiCheck.func, apiCheck.array\n    ]).optional,\n    validation: apiCheck.shape({\n      show: apiCheck.oneOfType([\n        apiCheck.bool, apiCheck.oneOf([null])\n      ]).optional,\n      messages: apiCheck.objectOf(apiCheck.func).optional,\n      errorExistsAndShouldBeVisible: apiCheck.bool.optional\n    }).optional,\n    formControl: apiCheck.object.optional,\n    value: apiCheck.func.optional,\n    runExpressions: apiCheck.func.optional\n  };\n\n  let formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\n  let typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape);\n  typeOptionsDefaultOptions.key = apiCheck.string.optional;\n\n  let formlyTypeOptions = apiCheck.shape({\n    name: apiCheck.string,\n    template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n    templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n    controller: apiCheck.oneOfType([\n      apiCheck.func, apiCheck.string, apiCheck.array\n    ]).optional,\n    link: apiCheck.func.optional,\n    defaultOptions: apiCheck.oneOfType([\n      apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)\n    ]).optional,\n    extends: apiCheck.string.optional,\n    wrapper: specifyWrapperType.optional,\n    data: apiCheck.object.optional,\n    validateOptions: apiCheck.func.optional,\n    apiCheck: apiCheckProperty.optional,\n    apiCheckInstance: apiCheckInstanceProperty.optional,\n    apiCheckFunction: apiCheckFunctionProperty.optional,\n    apiCheckOptions: apiCheck.object.optional,\n    overwriteOk: apiCheck.bool.optional\n  }).strict;\n\n  angular.extend(apiCheck, {\n    formlyTypeOptions, formlyFieldOptions, formlyExpression, formlyWrapperType\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyApiCheck.js\n **/","const angular = require('angular-fix');\nconst utils = require('../other/utils');\n\nmodule.exports = ngModule => {\n  ngModule.provider('formlyConfig', formlyConfig);\n\n  formlyConfig.tests = ON_TEST ? require('./formlyConfig.test')(ngModule) : null;\n\n  function formlyConfig(formlyUsabilityProvider, formlyApiCheck) {\n\n    var typeMap = {};\n    var templateWrappersMap = {};\n    var defaultWrapperName = 'default';\n    var _this = this;\n    var getError = formlyUsabilityProvider.getFormlyError;\n\n    angular.extend(this, {\n      setType,\n      getType,\n      setWrapper,\n      getWrapper,\n      getWrapperByType,\n      removeWrapperByName,\n      removeWrappersForType,\n      disableWarnings: false,\n      extras: {\n        disableNgModelAttrsManipulator: false,\n        ngModelAttrsManipulatorPreferBound: false\n      },\n      templateManipulators: {\n        preWrapper: [],\n        postWrapper: []\n      },\n      $get: () => this\n    });\n\n    function setType(options) {\n      if (angular.isArray(options)) {\n        angular.forEach(options, setType);\n      } else if (angular.isObject(options)) {\n        checkType(options);\n        if (options.extends) {\n          extendTypeOptions(options);\n        }\n        typeMap[options.name] = options;\n      } else {\n        throw getError(`You must provide an object or array for setType. You provided: ${JSON.stringify(arguments)}`);\n      }\n    }\n\n    function checkType(options) {\n      formlyApiCheck.throw(formlyApiCheck.formlyTypeOptions, arguments, {\n        prefix: 'formlyConfig.setType',\n        url: 'settype-validation-failed'\n      });\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, typeMap, options, 'types');\n      } else {\n        options.overwriteOk = undefined;\n      }\n    }\n\n    function extendTypeOptions(options) {\n      const extendsType = getType(options.extends, true, options);\n      extendTypeControllerFunction(options, extendsType);\n      extendTypeLinkFunction(options, extendsType);\n      extendTypeValidateOptionsFunction(options, extendsType);\n      extendTypeDefaultOptions(options, extendsType);\n      utils.reverseDeepMerge(options, extendsType);\n    }\n\n    function extendTypeControllerFunction(options, extendsType) {\n      const extendsCtrl = extendsType.controller;\n      if (!angular.isDefined(extendsCtrl)) {\n        return;\n      }\n      const optionsCtrl = options.controller;\n      if (angular.isDefined(optionsCtrl)) {\n        options.controller = function($scope, $controller) {\n          $controller(extendsCtrl, {$scope});\n          $controller(optionsCtrl, {$scope});\n        };\n        options.controller.$inject = ['$scope', '$controller'];\n      } else {\n        options.controller = extendsCtrl;\n      }\n    }\n\n    function extendTypeLinkFunction(options, extendsType) {\n      const extendsFn = extendsType.link;\n      if (!angular.isDefined(extendsFn)) {\n        return;\n      }\n      const optionsFn = options.link;\n      if (angular.isDefined(optionsFn)) {\n        options.link = function() {\n          extendsFn(...arguments);\n          optionsFn(...arguments);\n        };\n      } else {\n        options.link = extendsFn;\n      }\n    }\n\n    function extendTypeValidateOptionsFunction(options, extendsType) {\n      const extendsFn = extendsType.validateOptions;\n      if (!angular.isDefined(extendsFn)) {\n        return;\n      }\n      const optionsFn = options.validateOptions;\n      const originalDefaultOptions = options.defaultOptions;\n      if (angular.isDefined(optionsFn)) {\n        options.validateOptions = function(options) {\n          optionsFn(options);\n          let mergedOptions = angular.copy(options);\n          let defaultOptions = originalDefaultOptions;\n          if (defaultOptions) {\n            if (angular.isFunction(defaultOptions)) {\n              defaultOptions = defaultOptions(mergedOptions);\n            }\n            utils.reverseDeepMerge(mergedOptions, defaultOptions);\n          }\n          extendsFn(mergedOptions);\n        };\n      } else {\n        options.validateOptions = extendsFn;\n      }\n    }\n\n    function extendTypeDefaultOptions(options, extendsType) {\n      const extendsDO = extendsType.defaultOptions;\n      if (!angular.isDefined(extendsDO)) {\n        return;\n      }\n      const optionsDO = options.defaultOptions;\n      const optionsDOIsFn = angular.isFunction(optionsDO);\n      const extendsDOIsFn = angular.isFunction(extendsDO);\n      if (extendsDOIsFn) {\n        options.defaultOptions = function defaultOptions(options) {\n          const extendsDefaultOptions = extendsDO(options);\n          const mergedDefaultOptions = {};\n          utils.reverseDeepMerge(mergedDefaultOptions, options, extendsDefaultOptions);\n          let extenderOptionsDefaultOptions = optionsDO;\n          if (optionsDOIsFn) {\n            extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);\n          }\n          utils.reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n          return extendsDefaultOptions;\n        };\n      } else if (optionsDOIsFn) {\n        options.defaultOptions = function defaultOptions(options) {\n          let newDefaultOptions = {};\n          utils.reverseDeepMerge(newDefaultOptions, options, extendsDO);\n          return optionsDO(newDefaultOptions);\n        };\n      }\n    }\n\n    function getType(name, throwError, errorContext) {\n      if (!name) {\n        return undefined;\n      }\n      var type = typeMap[name];\n      if (!type && throwError === true) {\n        throw getError(\n          `There is no type by the name of \"${name}\": ${JSON.stringify(errorContext)}`\n        );\n      } else {\n        return type;\n      }\n    }\n\n    function setWrapper(options, name) {\n      if (angular.isArray(options)) {\n        return options.map(wrapperOptions => setWrapper(wrapperOptions));\n      } else if (angular.isObject(options)) {\n        options.types = getOptionsTypes(options);\n        options.name = getOptionsName(options, name);\n        checkWrapperAPI(options);\n        templateWrappersMap[options.name] = options;\n        return options;\n      } else if (angular.isString(options)) {\n        return setWrapper({\n          template: options,\n          name\n        });\n      }\n    }\n\n    function getOptionsTypes(options) {\n      if (angular.isString(options.types)) {\n        return [options.types];\n      }\n      if (!angular.isDefined(options.types)) {\n        return [];\n      } else {\n        return options.types;\n      }\n    }\n\n    function getOptionsName(options, name) {\n      return options.name || name || options.types.join(' ') || defaultWrapperName;\n    }\n\n    function checkWrapperAPI(options) {\n      formlyUsabilityProvider.checkWrapper(options);\n      if (options.template) {\n        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n      }\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n      } else {\n        delete options.overwriteOk;\n      }\n      checkWrapperTypes(options);\n    }\n\n    function checkWrapperTypes(options) {\n      let shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n      if (shouldThrow) {\n        throw getError(`Attempted to create a template wrapper with types that is not a string or an array of strings`);\n      }\n    }\n\n    function checkOverwrite(property, object, newValue, objectName) {\n      if (object.hasOwnProperty(property)) {\n        warn([\n          `Attempting to overwrite ${property} on ${objectName} which is currently`,\n          `${JSON.stringify(object[property])} with ${JSON.stringify(newValue)}`,\n          `To supress this warning, specify the property \"overwriteOk: true\"`\n        ].join(' '));\n      }\n    }\n\n    function getWrapper(name) {\n      return templateWrappersMap[name || defaultWrapperName];\n    }\n\n    function getWrapperByType(type) {\n      /* jshint maxcomplexity:6 */\n      var wrappers = [];\n      for (var name in templateWrappersMap) {\n        if (templateWrappersMap.hasOwnProperty(name)) {\n          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n            wrappers.push(templateWrappersMap[name]);\n          }\n        }\n      }\n      return wrappers;\n    }\n\n    function removeWrapperByName(name) {\n      var wrapper = templateWrappersMap[name];\n      delete templateWrappersMap[name];\n      return wrapper;\n    }\n\n    function removeWrappersForType(type) {\n      var wrappers = getWrapperByType(type);\n      if (!wrappers) {\n        return;\n      }\n      if (!angular.isArray(wrappers)) {\n        return removeWrapperByName(wrappers.name);\n      } else {\n        wrappers.forEach((wrapper) => removeWrapperByName(wrapper.name));\n        return wrappers;\n      }\n    }\n\n\n    function warn() {\n      if (!_this.disableWarnings) {\n        console.warn(...arguments);\n      }\n    }\n  }\n\n\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyConfig.js\n **/","module.exports = ngModule => {\n  ngModule.constant(\n    'formlyErrorAndWarningsUrlPrefix',\n    `https://github.com/formly-js/angular-formly/blob/${VERSION}/other/ERRORS_AND_WARNINGS.md#`\n  );\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyErrorAndWarningsUrlPrefix.js\n **/","var angular = require('angular-fix');\n\nmodule.exports = ngModule => {\n  ngModule.provider('formlyUsability', function(formlyVersion, formlyApiCheck) {\n    var errorsAndWarningsUrlPrefix =\n      `https://github.com/formly-js/angular-formly/blob/${formlyVersion}/other/ERRORS_AND_WARNINGS.md#`;\n    angular.extend(this, {\n      getFormlyError: getFormlyError,\n      getFieldError: getFieldError,\n      checkWrapper: checkWrapper,\n      checkWrapperTemplate: checkWrapperTemplate,\n      $get: () => this\n    });\n\n    function getFieldError(errorInfoSlug, message, field) {\n      if (arguments.length < 3) {\n        field = message;\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message) + ` Field definition: ${angular.toJson(field)}`);\n    }\n\n    function getFormlyError(errorInfoSlug, message) {\n      if (!message) {\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message));\n    }\n\n    function getErrorMessage(errorInfoSlug, message) {\n      let url = '';\n      if (errorInfoSlug !== null) {\n        url = `${errorsAndWarningsUrlPrefix}${errorInfoSlug}`;\n      }\n      return `Formly Error: ${message}. ${url}`;\n    }\n\n    function checkWrapper(wrapper) {\n      formlyApiCheck.throw(formlyApiCheck.formlyWrapperType, arguments, {\n        prefix: 'formlyConfig.setWrapper',\n        urlSuffix: 'setwrapper-validation-failed'\n      });\n    }\n\n    function checkWrapperTemplate(template, additionalInfo) {\n      var formlyTransclude = '<formly-transclude></formly-transclude>';\n      if (template.indexOf(formlyTransclude) === -1) {\n        throw getFormlyError(\n          `Template wrapper templates must use \"${formlyTransclude}\" somewhere in them. ` +\n          `This one does not have \"<formly-transclude></formly-transclude>\" in it: ${template}` + '\\n' +\n          `Additional information: ${JSON.stringify(additionalInfo)}`\n        );\n      }\n    }\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyUsability.js\n **/","module.exports = ngModule => {\n  ngModule.factory('formlyValidationMessages', function() {\n\n    var formlyValidationMessages = {\n      addTemplateOptionValueMessage,\n      addStringMessage,\n      messages: {}\n    };\n\n    return formlyValidationMessages;\n\n    function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n      formlyValidationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n    }\n\n    function addStringMessage(name, string) {\n      formlyValidationMessages.messages[name] = () => string;\n    }\n\n\n    function templateOptionValue(prop, prefix, suffix, alternate) {\n      return function getValidationMessage(viewValue, modelValue, scope) {\n        if (scope.options.templateOptions[prop]) {\n          return `${prefix} ${scope.options.templateOptions[prop]} ${suffix}`;\n        } else {\n          return alternate;\n        }\n      };\n    }\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyValidationMessages.js\n **/","module.exports = ngModule => {\n  ngModule.constant('formlyVersion', VERSION);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyVersion.js\n **/","module.exports = ngModule => {\n  require('./formlyApiCheck')(ngModule);\n  require('./formlyUsability')(ngModule);\n  require('./formlyConfig')(ngModule);\n  require('./formlyVersion')(ngModule);\n  require('./formlyErrorAndWarningsUrlPrefix')(ngModule);\n  require('./formlyValidationMessages')(ngModule);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/index.js\n **/","module.exports = ngModule => {\n  ngModule.run(addCustomTags);\n\n  function addCustomTags($document) {\n\n    if ($document && $document.get) {\n      //IE8 check ->\n      // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203\n      var document = $document.get(0);\n      var div = document.createElement('div');\n      div.innerHTML = '<!--[if lt IE 9]><i></i><![endif]-->';\n      var isIeLessThan9 = (div.getElementsByTagName('i').length === 1);\n\n      if (isIeLessThan9) {\n        //add the custom elements that we need for formly\n        var customElements =\n          ['formly-field', 'formly-form', 'formly-custom-validation', 'formly-focus', 'formly-transpose'];\n\n        for (var i = 0; i < customElements.length; i++) {\n          document.createElement(customElements[i]);\n        }\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./run/formlyCustomTags.js\n **/","module.exports = ngModule => {\n  ngModule.run(addFormlyNgModelAttrsManipulator);\n\n  function addFormlyNgModelAttrsManipulator(formlyConfig) {\n    if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n      return;\n    }\n    formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\n\n    function ngModelAttrsManipulator(template, options, scope) {\n      /* jshint maxcomplexity:7 */\n      var el = angular.element('<a></a>');\n      var data = options.data;\n      if (data.noTouchy) {\n        return template;\n      }\n      el.append(template);\n      var modelEls = angular.element(el[0].querySelectorAll('[ng-model]'));\n      if (!modelEls || !modelEls.length) {\n        return template;\n      }\n\n      addIfNotPresent(modelEls, 'id', scope.id);\n      addIfNotPresent(modelEls, 'name', scope.id);\n\n      if (angular.isDefined(options.validators)) {\n        addIfNotPresent(modelEls, 'formly-custom-validation', 'options.validators');\n      }\n      if (angular.isDefined(options.modelOptions)) {\n        addIfNotPresent(modelEls, 'ng-model-options', 'options.modelOptions');\n        if (options.modelOptions.getterSetter) {\n          modelEls.attr('ng-model', 'options.value');\n        }\n      }\n      addTemplateOptionsAttrs();\n\n      return el.html();\n\n\n      function addTemplateOptionsAttrs() {\n        if (!options.templateOptions && !options.expressionProperties) {\n          // no need to run these if there are no templateOptions or expressionProperties\n          return;\n        }\n        const to = options.templateOptions || {};\n        const ep = options.expressionProperties || {};\n\n        let ngModelAttributes = getBuiltinAttributes();\n\n        // extend with the user's specifications winning\n        angular.extend(ngModelAttributes, options.ngModelAttrs);\n\n        angular.forEach(ngModelAttributes, (val, name) => {\n          /* jshint maxcomplexity:10 */\n          let attrVal;\n          let attrName;\n          const ref = `options.templateOptions['${name}']`;\n          const toVal = to[name];\n          const epVal = getEpValue(ep, name);\n\n          const inTo = angular.isDefined(toVal);\n          const inEp = angular.isDefined(epVal);\n          if (val.value) {\n            // I realize this looks backwards, but it's right, trust me...\n            attrName = val.value;\n            attrVal = name;\n          } else if (val.expression && inTo) {\n            attrName = val.expression;\n            if (angular.isString(to[name])) {\n              attrVal = `$eval(${ref})`;\n            } else if (angular.isFunction(to[name])) {\n              attrVal = `${ref}(model[options.key], options, this, $event)`;\n            } else {\n              throw new Error(\n                `options.templateOptions.${name} must be a string or function: ${JSON.stringify(options)}`\n              );\n            }\n          } else if (val.bound && inEp) {\n            attrName = val.bound;\n            attrVal = ref;\n          } else if (val.attribute && inEp) {\n            attrName = val.attribute;\n            attrVal = `{{${ref}}}`;\n          } else if (val.attribute && inTo) {\n            attrName = val.attribute;\n            attrVal = toVal;\n          } else if (val.bound && inTo) {\n            attrName = val.bound;\n            attrVal = ref;\n          }\n          if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n            addIfNotPresent(modelEls, attrName, attrVal);\n          }\n        });\n      }\n\n      function getBuiltinAttributes() {\n        let ngModelAttributes = {\n          focus: {\n            attribute: 'formly-focus'\n          }\n        };\n        const boundOnly = [];\n        const bothAttributeAndBound = ['required', 'disabled', 'pattern', 'minlength'];\n        const expressionOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n        const attributeOnly = ['placeholder', 'min', 'max', 'tabindex', 'type'];\n        if (formlyConfig.extras.ngModelAttrsManipulatorPreferBound) {\n          boundOnly.push('maxlength');\n        } else {\n          bothAttributeAndBound.push('maxlength');\n        }\n\n        angular.forEach(boundOnly, item => {\n          ngModelAttributes[item] = {bound: 'ng-' + item};\n        });\n\n        angular.forEach(bothAttributeAndBound, item => {\n          ngModelAttributes[item] = {attribute: item, bound: 'ng-' + item};\n        });\n\n        angular.forEach(expressionOnly, item => {\n          var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n          ngModelAttributes[propName] = {expression: 'ng-' + item};\n        });\n\n        angular.forEach(attributeOnly, item => {\n          ngModelAttributes[item] = {attribute: item};\n        });\n        return ngModelAttributes;\n      }\n\n      function getEpValue(ep, name) {\n        return ep['templateOptions.' + name] ||\n          ep[`templateOptions['${name}']`] ||\n          ep[`templateOptions[\"${name}\"]`];\n      }\n\n      function addIfNotPresent(el, attr, val) {\n        if (!el.attr(attr)) {\n          el.attr(attr, val);\n        }\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./run/formlyNgModelAttrsManipulator.js\n **/","module.exports = ngModule => {\n  require('./formlyNgModelAttrsManipulator')(ngModule);\n  require('./formlyCustomTags')(ngModule);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./run/index.js\n **/","const utils = require('../other/utils');\n\nmodule.exports = ngModule => {\n  ngModule.factory('formlyUtil', formlyUtil);\n\n  formlyUtil.tests = ON_TEST ? require('./formlyUtil.test')(ngModule) : null;\n\n  function formlyUtil() {\n    return utils;\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./services/formlyUtil.js\n **/","module.exports = ngModule => {\n  ngModule.factory('formlyWarn', function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n    return function warn() {\n      if (!formlyConfig.disableWarnings) {\n        var args = Array.prototype.slice.call(arguments);\n        var warnInfoSlug = args.shift();\n        args.unshift('Formly Warning:');\n        args.push(`${formlyErrorAndWarningsUrlPrefix}${warnInfoSlug}`);\n        $log.warn(...args);\n      }\n    };\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./services/formlyWarn.js\n **/","module.exports = ngModule => {\n  require('./formlyUtil')(ngModule);\n  require('./formlyWarn')(ngModule);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./services/index.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_24__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 24\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"formly.min.js"}