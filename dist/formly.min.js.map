{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap 836da72e358eb6e0853e","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./other/utils.js","webpack:///external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-form.js","webpack:///./directives/index.js","webpack:///./index.common.js","webpack:///./providers/formlyApiCheck.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyErrorAndWarningsUrlPrefix.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyValidationMessages.js","webpack:///./providers/formlyVersion.js","webpack:///./providers/index.js","webpack:///./run/formlyCustomTags.js","webpack:///./run/formlyNgModelAttrsManipulator.js","webpack:///./run/index.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///./services/index.js","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_24__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","angular","version","window","formlyEval","scope","expression","$modelValue","$viewValue","isFunction","$eval","getFieldId","formId","options","index","type","template","templateUrl","key","join","reverseDeepMerge","dest","forEach","arguments","src","val","prop","isDefined","objAndSameType","copy","obj1","obj2","isObject","Object","getPrototypeOf","findByNodeName","el","nodeName","element","toUpperCase","children","i","length","node","ngModule","formlyCustomValidation","formlyUtil","$q","isPromiseLike","obj","then","checkValidators","validators","allowedProperties","validatorsWithExtraProps","validator","name","isString","extraProps","v","indexOf","push","keys","Error","JSON","stringify","restrict","link","attrs","ctrl","opts","validation","messages","message","useNewValidatorsApi","hasOwnProperty","setupWithValidators","validatorCollection","isPossiblyAsync","modelValue","viewValue","value","when","reject","setupWithParsers","inFlightValidator","undefined","$parsers","unshift","isValid","$pending","$setValidity","directive","tests","$inject","formlyField","$http","$compile","$templateCache","formlyConfig","formlyValidationMessages","formlyApiCheck","formlyUsability","formlyWarn","asHtml","wrapper","append","html","getFieldTemplate","getType","getFieldError","getTemplate","isUrl","httpOptions","cache","get","response","data","error","transcludeInWrappers","getWrapperOption","checkWrapper","validateOptions","runApiCheck","promises","map","w","all","wrappersTemplates","wrapperTemplate","checkWrapperTemplate","reverse","totalWrapper","shift","doTransclusion","superWrapper","transcludeEl","find","replaceWith","arrayify","getWrapper","getWrapperByType","typeWrappers","concat","defaultWrapper","checkApi","formlyFieldOptions","prefix","url","_ref","apiCheck","apiCheckInstance","apiCheckFunction","apiCheckOptions","instance","fn","shape","config","output","docsBaseUrl","transclude","model","fields","formState","form","controller","$scope","$timeout","$parse","$controller","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","setter","assign","promise","newVal","simplifyLife","templateOptions","mergeFieldOptionsWithTypeDefaults","mergeOptions","defaultOptions","properOrder","optionsTypes","typeName","extraOptions","extendOptionsWithDefaults","initialValue","extend","resetModel","updateInitialValue","setFormControl","noFormControl","$watch","formControl","fc","addShowMessagesWatcher","addModelWatcher","show","$invalid","noTouchedButDirty","isUndefined","$touched","$dirty","errorExistsAndShouldBeVisible","showError","$setViewValue","$render","addValidationMessages","invokeControllers","fieldType","to","setElementTemplate","templateEl","contents","apply","thusly","args","runManipulators","manipulators","chain","manipulator","newTemplate","templateManipulators","preWrapper","postWrapper","isArray","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","_toConsumableArray","arr","Array","arr2","from","_slice","prototype","slice","formlyForm","currentFormId","optionsApi","object","optional","func","removeChromeAutoComplete","bool","strict","rootEl","formName","replace","setupOptions","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","originalExpression","modifyArgs","displayName","originalListener","_len","originalArgs","_key","newResult","$parent","global","extras","offInstance","onInstance","input","document","createElement","setAttribute","appendChild","ngModuleName","shapeRequiredIfNot","otherProps","propChecker","shapeRequiredIfNotDefinition","propName","location","propExists","otherPropsExist","some","otherProp","utils","getError","checkerHelpers","setupChecker","constant","formlyExpression","oneOfType","string","specifyWrapperType","oneOf","typeOrArrayOf","apiCheckProperty","objectOf","apiCheckInstanceProperty","onlyIf","withProperties","warn","throw","apiCheckFunctionProperty","formlyWrapperType","ifNot","types","overwriteOk","fieldOptionsApiShape","number","modelOptions","updateOn","debounce","allowInvalid","getterSetter","timezone","hide","ngModelAttrs","any","attribute","bound","array","typeOptionsDefaultOptions","formlyTypeOptions","extends","formlyUsabilityProvider","setType","checkType","extendTypeOptions","typeMap","checkOverwrite","extendsType","extendTypeControllerFunction","extendTypeLinkFunction","extendTypeValidateOptionsFunction","extendTypeDefaultOptions","extendsCtrl","optionsCtrl","extendsFn","optionsFn","originalDefaultOptions","mergedOptions","extendsDO","optionsDO","optionsDOIsFn","extendsDOIsFn","extendsDefaultOptions","mergedDefaultOptions","extenderOptionsDefaultOptions","newDefaultOptions","throwError","errorContext","setWrapper","_x","_x2","_again","wrapperOptions","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","property","newValue","objectName","wrappers","removeWrapperByName","removeWrappersForType","_this","disableWarnings","console","_this2","getFormlyError","disableNgModelAttrsManipulator","ngModelAttrsManipulatorPreferUnbound","$get","provider","formlyVersion","errorInfoSlug","getErrorMessage","toJson","errorsAndWarningsUrlPrefix","urlSuffix","additionalInfo","formlyTransclude","addTemplateOptionValueMessage","suffix","alternate","templateOptionValue","addStringMessage","addCustomTags","div","innerHTML","isIeLessThan9","getElementsByTagName","customElements","run","addFormlyNgModelAttrsManipulator","ngModelAttrsManipulator","addValidation","addIfNotPresent","modelNodes","addModelOptions","addTemplateOptionsAttrs","ep","ngModelAttributes","getBuiltInAttributes","attrVal","attrName","ref","toVal","epVal","getEpValue","inTo","inEp","skipNgModelAttrsManipulator","querySelectorAll","boundOnly","bothBooleanAndBound","bothAttributeAndBound","expressionOnly","attributeOnly","item","boolean","substr","nodes","attr","getAttribute","test","formlyErrorAndWarningsUrlPrefix","$log","warnInfoSlug"],"mappings":"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","file":"formly.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"api-check\"), require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"api-check\", \"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"api-check\"), require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"apiCheck\"], root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_24__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"api-check\"), require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"api-check\", \"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"api-check\"), require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"apiCheck\"], root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_24__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = __webpack_require__(10);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(24);\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"https://github.com/formly-js/angular-formly/blob/\" + (\"6.0.0-beta.7\") + \"/other/ERRORS_AND_WARNINGS.md#\";\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = { formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName };\n\t\n\tfunction formlyEval(scope, expression, $modelValue, $viewValue) {\n\t  if (angular.isFunction(expression)) {\n\t    return expression($viewValue, $modelValue, scope);\n\t  } else {\n\t    return scope.$eval(expression, { $viewValue: $viewValue, $modelValue: $modelValue });\n\t  }\n\t}\n\t\n\tfunction getFieldId(formId, options, index) {\n\t  var type = options.type;\n\t  if (!type && options.template) {\n\t    type = \"template\";\n\t  } else if (!type && options.templateUrl) {\n\t    type = \"templateUrl\";\n\t  }\n\t\n\t  return [formId, type, options.key, index].join(\"_\");\n\t}\n\t\n\tfunction reverseDeepMerge(dest) {\n\t  angular.forEach(arguments, function (src, index) {\n\t    if (!index) {\n\t      return;\n\t    }\n\t    angular.forEach(src, function (val, prop) {\n\t      if (!angular.isDefined(dest[prop])) {\n\t        dest[prop] = angular.copy(val);\n\t      } else if (objAndSameType(dest[prop], val)) {\n\t        reverseDeepMerge(dest[prop], val);\n\t      }\n\t    });\n\t  });\n\t}\n\t\n\tfunction objAndSameType(obj1, obj2) {\n\t  return angular.isObject(obj1) && angular.isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t}\n\t\n\t//recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\n\tfunction findByNodeName(el, nodeName) {\n\t  if (!el.prop) {\n\t    // not a jQuery or jqLite object -> wrap it\n\t    el = angular.element(el);\n\t  }\n\t\n\t  if (el.prop(\"nodeName\") === nodeName.toUpperCase()) {\n\t    return el;\n\t  }\n\t\n\t  var c = el.children();\n\t  for (var i = 0; c && i < c.length; i++) {\n\t    var node = findByNodeName(c[i], nodeName);\n\t    if (node) {\n\t      return node;\n\t    }\n\t  }\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyCustomValidation\", formlyCustomValidation);\n\t\n\t  formlyCustomValidation.tests = false ? require(\"./formly-custom-validation.test\")(ngModule) : null;\n\t\n\t  function formlyCustomValidation(formlyUtil, $q) {\n\t    return {\n\t      restrict: \"A\",\n\t      require: \"ngModel\",\n\t      link: function link(scope, el, attrs, ctrl) {\n\t        var opts = scope.options;\n\t        if (opts.validators) {\n\t          checkValidators(opts.validators);\n\t        }\n\t        opts.validation.messages = opts.validation.messages || {};\n\t        angular.forEach(opts.validation.messages, function (message, key) {\n\t          opts.validation.messages[key] = function () {\n\t            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t          };\n\t        });\n\t\n\t        var useNewValidatorsApi = ctrl.hasOwnProperty(\"$validators\") && !attrs.hasOwnProperty(\"useParsers\");\n\t        angular.forEach(opts.validators, function (validator, name) {\n\t          var message = validator.message;\n\t          if (message) {\n\t            opts.validation.messages[name] = function () {\n\t              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t            };\n\t          }\n\t          validator = angular.isObject(validator) ? validator.expression : validator;\n\t          var isPossiblyAsync = !angular.isString(validator);\n\t          if (useNewValidatorsApi) {\n\t            setupWithValidators();\n\t          } else {\n\t            setupWithParsers();\n\t          }\n\t\n\t          function setupWithValidators() {\n\t            var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n\t            ctrl[validatorCollection][name] = function (modelValue, viewValue) {\n\t              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t              if (isPossiblyAsync) {\n\t                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n\t              } else {\n\t                return value;\n\t              }\n\t            };\n\t          }\n\t\n\t          function setupWithParsers() {\n\t            var inFlightValidator = undefined;\n\t            ctrl.$parsers.unshift(function (viewValue) {\n\t              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t              if (isPromiseLike(isValid)) {\n\t                ctrl.$pending = ctrl.$pending || {};\n\t                ctrl.$pending[name] = true;\n\t                inFlightValidator = isValid;\n\t                isValid.then(function () {\n\t                  if (inFlightValidator === isValid) {\n\t                    ctrl.$setValidity(name, true);\n\t                  }\n\t                })[\"catch\"](function () {\n\t                  if (inFlightValidator === isValid) {\n\t                    ctrl.$setValidity(name, false);\n\t                  }\n\t                })[\"finally\"](function () {\n\t                  if (Object.keys(ctrl.$pending).length === 1) {\n\t                    delete ctrl.$pending;\n\t                  } else {\n\t                    delete ctrl.$pending[name];\n\t                  }\n\t                });\n\t              } else {\n\t                ctrl.$setValidity(name, isValid);\n\t              }\n\t              return viewValue;\n\t            });\n\t          }\n\t        });\n\t      }\n\t    };\n\t\n\t    function isPromiseLike(obj) {\n\t      return obj && angular.isFunction(obj.then);\n\t    }\n\t\n\t    function checkValidators(validators) {\n\t      var allowedProperties = [\"expression\", \"message\"];\n\t      var validatorsWithExtraProps = {};\n\t      angular.forEach(validators, function (validator, name) {\n\t        if (angular.isString(validator)) {\n\t          return;\n\t        }\n\t        var extraProps = [];\n\t        angular.forEach(validator, function (v, key) {\n\t          if (allowedProperties.indexOf(key) === -1) {\n\t            extraProps.push(key);\n\t          }\n\t        });\n\t        if (extraProps.length) {\n\t          validatorsWithExtraProps[name] = extraProps;\n\t        }\n\t      });\n\t      if (Object.keys(validatorsWithExtraProps).length) {\n\t        throw new Error([\"Validators are only allowed to be functions or objects that have \" + allowedProperties.join(\", \") + \".\", \"You provided some extra properties: \" + JSON.stringify(validatorsWithExtraProps)].join(\" \"));\n\t      }\n\t    }\n\t  }\n\t  formlyCustomValidation.$inject = [\"formlyUtil\", \"$q\"];\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyField\", formlyField);\n\t\n\t  formlyField.tests = false ? require(\"./formly-field.test\")(ngModule) : null;\n\t\n\t  /**\n\t   * @ngdoc directive\n\t   * @name formlyField\n\t   * @restrict AE\n\t   */\n\t  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n\t    return {\n\t      restrict: \"AE\",\n\t      transclude: true,\n\t      scope: {\n\t        options: \"=\",\n\t        model: \"=\",\n\t        formId: \"@\",\n\t        index: \"=?\",\n\t        fields: \"=?\",\n\t        formState: \"=?\",\n\t        form: \"=?\"\n\t      },\n\t      controller: [\"$scope\", \"$timeout\", \"$parse\", \"$controller\", function fieldController($scope, $timeout, $parse, $controller) {\n\t        var opts = $scope.options;\n\t        var fieldType = opts.type && formlyConfig.getType(opts.type);\n\t        simplifyLife(opts);\n\t        mergeFieldOptionsWithTypeDefaults(opts, fieldType);\n\t        extendOptionsWithDefaults(opts, $scope.index);\n\t        checkApi(opts);\n\t        // set field id to link labels and fields\n\t        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);\n\t\n\t        // initalization\n\t        runExpressions();\n\t        setFormControl($scope, opts);\n\t        addModelWatcher($scope, opts);\n\t        addValidationMessages(opts);\n\t        // simplify things\n\t        // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t        $scope.to = $scope.options.templateOptions;\n\t        invokeControllers($scope, opts, fieldType);\n\t\n\t        // function definitions\n\t        function runExpressions() {\n\t          $timeout(function () {\n\t            // must run on next tick to make sure that the current value is correct.\n\t            var field = $scope.options;\n\t            var currentValue = valueGetterSetter();\n\t            angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t              var setter = $parse(prop).assign;\n\t              var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n\t              promise.then(function (value) {\n\t                setter(field, value);\n\t              });\n\t            });\n\t          });\n\t        }\n\t\n\t        function valueGetterSetter(newVal) {\n\t          if (!$scope.model || !$scope.options.key) {\n\t            return;\n\t          }\n\t          if (angular.isDefined(newVal)) {\n\t            $scope.model[$scope.options.key] = newVal;\n\t          }\n\t          return $scope.model[$scope.options.key];\n\t        }\n\t\n\t        function simplifyLife(options) {\n\t          // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t          formlyUtil.reverseDeepMerge(options, {\n\t            data: {},\n\t            templateOptions: {},\n\t            validation: {}\n\t          });\n\t        }\n\t\n\t        function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t          if (type) {\n\t            mergeOptions(options, type.defaultOptions);\n\t          }\n\t          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t          angular.forEach(properOrder, function (typeName) {\n\t            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t          });\n\t        }\n\t\n\t        function mergeOptions(options, extraOptions) {\n\t          if (extraOptions) {\n\t            if (angular.isFunction(extraOptions)) {\n\t              extraOptions = extraOptions(options);\n\t            }\n\t            formlyUtil.reverseDeepMerge(options, extraOptions);\n\t          }\n\t        }\n\t\n\t        function extendOptionsWithDefaults(options, index) {\n\t          var key = options.key || index || 0;\n\t          var initialValue = $scope.model && $scope.model[key];\n\t          angular.extend(options, {\n\t            // attach the key in case the formly-field directive is used directly\n\t            key: key,\n\t            value: valueGetterSetter,\n\t            runExpressions: runExpressions,\n\t            resetModel: resetModel,\n\t            updateInitialValue: updateInitialValue,\n\t            initialValue: initialValue\n\t          });\n\t        }\n\t\n\t        // initialization functions\n\t        function setFormControl(scope, options) {\n\t          if (options.noFormControl) {\n\t            return;\n\t          }\n\t          scope.$watch(\"form[\\\"\" + scope.id + \"\\\"]\", function (formControl) {\n\t            if (formControl) {\n\t              scope.fc = formControl; // shortcut for template authors\n\t              scope.options.formControl = formControl;\n\t              addShowMessagesWatcher(scope, options);\n\t            }\n\t          });\n\t        }\n\t\n\t        function addModelWatcher(scope, options) {\n\t          if (options.model) {\n\t            scope.$watch(\"options.model\", runExpressions, true);\n\t          }\n\t        }\n\t\n\t        function addShowMessagesWatcher(scope, options) {\n\t          scope.$watch(function () {\n\t            if (typeof scope.options.validation.show === \"boolean\") {\n\t              return scope.fc.$invalid && scope.options.validation.show;\n\t            } else {\n\t              var noTouchedButDirty = angular.isUndefined(scope.fc.$touched) && scope.fc.$dirty;\n\t              return scope.fc.$invalid && (scope.fc.$touched || noTouchedButDirty);\n\t            }\n\t          }, function (show) {\n\t            options.validation.errorExistsAndShouldBeVisible = show;\n\t            scope.showError = show; // shortcut for template authors\n\t          });\n\t        }\n\t\n\t        function resetModel() {\n\t          $scope.model[$scope.options.key] = $scope.options.initialValue;\n\t          if ($scope.options.formControl) {\n\t            $scope.options.formControl.$setViewValue($scope.model[$scope.options.key]);\n\t            $scope.options.formControl.$render();\n\t          }\n\t        }\n\t\n\t        function updateInitialValue() {\n\t          $scope.options.initialValue = $scope.model[$scope.options.key];\n\t        }\n\t\n\t        function addValidationMessages(options) {\n\t          options.validation.messages = options.validation.messages || {};\n\t          angular.forEach(formlyValidationMessages.messages, function (expression, name) {\n\t            if (!options.validation.messages[name]) {\n\t              options.validation.messages[name] = function (viewValue, modelValue, scope) {\n\t                return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t              };\n\t            }\n\t          });\n\t        }\n\t\n\t        function invokeControllers(scope) {\n\t          var options = arguments[1] === undefined ? {} : arguments[1];\n\t          var type = arguments[2] === undefined ? {} : arguments[2];\n\t\n\t          angular.forEach([type.controller, options.controller], function (controller) {\n\t            if (controller) {\n\t              $controller(controller, { $scope: scope });\n\t            }\n\t          });\n\t        }\n\t      }],\n\t      link: function fieldLink(scope, el) {\n\t        var type = scope.options.type && formlyConfig.getType(scope.options.type);\n\t        var args = arguments;\n\t        var thusly = this;\n\t        getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate)[\"catch\"](function (error) {\n\t          formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n\t        });\n\t\n\t        function setElementTemplate(templateEl) {\n\t          el.html(asHtml(templateEl));\n\t          $compile(el.contents())(scope);\n\t          if (type && type.link) {\n\t            type.link.apply(thusly, args);\n\t          }\n\t          if (scope.options.link) {\n\t            scope.options.link.apply(thusly, args);\n\t          }\n\t        }\n\t\n\t        function runManipulators(manipulators) {\n\t          return function runManipulatorsOnTemplate(template) {\n\t            var chain = $q.when(template);\n\t            angular.forEach(manipulators, function (manipulator) {\n\t              chain = chain.then(function (template) {\n\t                return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t                });\n\t              });\n\t            });\n\t            return chain;\n\t          };\n\t        }\n\t      }\n\t    };\n\t\n\t    function asHtml(el) {\n\t      var wrapper = angular.element(\"<a></a>\");\n\t      return wrapper.append(el).html();\n\t    }\n\t\n\t    function getFieldTemplate(options) {\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      var template = options.template || type && type.template;\n\t      var templateUrl = options.templateUrl || type && type.templateUrl;\n\t      if (!template && !templateUrl) {\n\t        throw formlyUsability.getFieldError(\"type-type-has-no-template\", \"Type '\" + options.type + \"' has not template. On element:\", options);\n\t      }\n\t      return getTemplate(template || templateUrl, !template);\n\t    }\n\t\n\t    function getTemplate(template, isUrl) {\n\t      if (!isUrl) {\n\t        return $q.when(template);\n\t      } else {\n\t        var httpOptions = { cache: $templateCache };\n\t        return $http.get(template, httpOptions).then(function (response) {\n\t          return response.data;\n\t        })[\"catch\"](function (error) {\n\t          formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n\t        });\n\t      }\n\t    }\n\t\n\t    function transcludeInWrappers(options) {\n\t      var wrapper = getWrapperOption(options);\n\t\n\t      return function transcludeTemplate(template) {\n\t        if (!wrapper.length) {\n\t          return $q.when(template);\n\t        }\n\t\n\t        wrapper.forEach(function (wrapper) {\n\t          formlyUsability.checkWrapper(wrapper, options);\n\t          wrapper.validateOptions && wrapper.validateOptions(options);\n\t          runApiCheck(wrapper, options);\n\t        });\n\t        var promises = wrapper.map(function (w) {\n\t          return getTemplate(w.template || w.templateUrl, !w.template);\n\t        });\n\t        return $q.all(promises).then(function (wrappersTemplates) {\n\t          wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t          });\n\t          wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t          var totalWrapper = wrappersTemplates.shift();\n\t          wrappersTemplates.forEach(function (wrapperTemplate) {\n\t            totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t          });\n\t          return doTransclusion(totalWrapper, template);\n\t        });\n\t      };\n\t    }\n\t\n\t    function doTransclusion(wrapper, template) {\n\t      var superWrapper = angular.element(\"<a></a>\"); // this allows people not have to have a single root in wrappers\n\t      superWrapper.append(wrapper);\n\t      var transcludeEl = superWrapper.find(\"formly-transclude\");\n\t      if (!transcludeEl.length) {\n\t        //try it using our custom find function\n\t        transcludeEl = formlyUtil.findByNodeName(superWrapper, \"formly-transclude\");\n\t      }\n\t      transcludeEl.replaceWith(template);\n\t      return superWrapper.html();\n\t    }\n\t\n\t    function getWrapperOption(options) {\n\t      var wrapper = options.wrapper;\n\t      // explicit null means no wrapper\n\t      if (wrapper === null) {\n\t        return [];\n\t      }\n\t\n\t      // nothing specified means use the default wrapper for the type\n\t      if (!wrapper) {\n\t        // get all wrappers that specify they apply to this type\n\t        wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t      } else {\n\t        wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t      }\n\t\n\t      // get all wrappers for that this type specified that it uses.\n\t      var type = formlyConfig.getType(options.type, true, options);\n\t      if (type && type.wrapper) {\n\t        var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t        wrapper = wrapper.concat(typeWrappers);\n\t      }\n\t\n\t      // add the default wrapper last\n\t      var defaultWrapper = formlyConfig.getWrapper();\n\t      if (defaultWrapper) {\n\t        wrapper.push(defaultWrapper);\n\t      }\n\t      return wrapper;\n\t    }\n\t\n\t    function checkApi(options) {\n\t      formlyApiCheck[\"throw\"](formlyApiCheck.formlyFieldOptions, options, {\n\t        prefix: \"formly-field directive\",\n\t        url: \"formly-field-directive-validation-failed\"\n\t      });\n\t      // validate with the type\n\t      var type = options.type && formlyConfig.getType(options.type);\n\t      if (type) {\n\t        if (type.validateOptions) {\n\t          type.validateOptions(options);\n\t        }\n\t        runApiCheck(type, options);\n\t      }\n\t    }\n\t\n\t    function runApiCheck(_ref, options) {\n\t      var apiCheck = _ref.apiCheck;\n\t      var apiCheckInstance = _ref.apiCheckInstance;\n\t      var apiCheckFunction = _ref.apiCheckFunction;\n\t      var apiCheckOptions = _ref.apiCheckOptions;\n\t\n\t      if (!apiCheck) {\n\t        return;\n\t      }\n\t      var instance = apiCheckInstance || formlyApiCheck;\n\t      var fn = apiCheckFunction || \"warn\";\n\t      var shape = instance.shape(apiCheck);\n\t      instance[fn](shape, options, apiCheckOptions || {\n\t        prefix: \"formly-field \" + name,\n\t        url: formlyApiCheck.config.output.docsBaseUrl + \"formly-field-type-apicheck-failed\"\n\t      });\n\t    }\n\t  }\n\t  formlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyValidationMessages\", \"formlyApiCheck\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\t\n\t  function arrayify(obj) {\n\t    if (obj && !angular.isArray(obj)) {\n\t      obj = [obj];\n\t    } else if (!obj) {\n\t      obj = [];\n\t    }\n\t    return obj;\n\t  }\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyFocus\", [\"$timeout\", \"$document\", function ($timeout, $document) {\n\t    /* jshint -W052 */\n\t    return {\n\t      restrict: \"A\",\n\t      link: function link(scope, element, attrs) {\n\t        var previousEl = null;\n\t        var el = element[0];\n\t        var doc = $document[0];\n\t        attrs.$observe(\"formlyFocus\", function (value) {\n\t          if (value === \"true\") {\n\t            $timeout(function () {\n\t              previousEl = doc.activeElement;\n\t              el.focus();\n\t            }, ~ ~attrs.focusWait);\n\t          } else if (value === \"false\") {\n\t            if (doc.activeElement === el) {\n\t              el.blur();\n\t              if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n\t                previousEl.focus();\n\t              }\n\t            }\n\t          }\n\t        });\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };\n\t\n\tvar _slice = Array.prototype.slice;\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.directive(\"formlyForm\", formlyForm);\n\t\n\t  formlyForm.tests = false ? require(\"./formly-form.test\")(ngModule) : null;\n\t\n\t  /**\n\t   * @ngdoc directive\n\t   * @name formlyForm\n\t   * @restrict E\n\t   */\n\t  function formlyForm(formlyUsability, $parse, formlyApiCheck, formlyConfig) {\n\t    var currentFormId = 1;\n\t    var optionsApi = [formlyApiCheck.shape({\n\t      formState: formlyApiCheck.object.optional,\n\t      resetModel: formlyApiCheck.func.optional,\n\t      updateInitialValue: formlyApiCheck.func.optional,\n\t      removeChromeAutoComplete: formlyApiCheck.bool.optional\n\t    }).strict.optional];\n\t    return {\n\t      restrict: \"E\",\n\t      template: function template(el, attrs) {\n\t        /* jshint -W033 */ // this because jshint is broken I guess...\n\t        var rootEl = attrs.rootEl || \"ng-form\";\n\t        var formName = \"formly_\" + currentFormId++;\n\t        return \"\\n          <\" + rootEl + \" class=\\\"formly\\\"\\n                   name=\\\"\" + formName + \"\\\"\\n                   role=\\\"form\\\">\\n            <div formly-field\\n                 ng-repeat=\\\"field in fields track by $index\\\"\\n                 ng-if=\\\"!field.hide\\\"\\n                 class=\\\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\\\"\\n                 options=\\\"field\\\"\\n                 model=\\\"field.model || model\\\"\\n                 fields=\\\"fields\\\"\\n                 form=\\\"\" + formName + \"\\\"\\n                 form-id=\\\"\" + formName + \"\\\"\\n                 form-state=\\\"options.formState\\\"\\n                 index=\\\"$index\\\">\\n            </div>\\n            <div ng-transclude></div>\\n          </\" + rootEl + \">\\n        \";\n\t      },\n\t      replace: true,\n\t      transclude: true,\n\t      scope: {\n\t        fields: \"=\",\n\t        model: \"=\",\n\t        form: \"=?\",\n\t        options: \"=?\"\n\t      },\n\t      controller: [\"$scope\", function controller($scope) {\n\t        setupOptions();\n\t        $scope.model = $scope.model || {};\n\t        $scope.fields = $scope.fields || [];\n\t\n\t        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t        // watch the model and evaluate watch expressions that depend on it.\n\t        $scope.$watch(\"model\", function onResultUpdate(newResult) {\n\t          angular.forEach($scope.fields, function (field) {\n\t            /*jshint -W030 */\n\t            field.runExpressions && field.runExpressions(newResult);\n\t          });\n\t        }, true);\n\t\n\t        function setupOptions() {\n\t          formlyApiCheck[\"throw\"](optionsApi, [$scope.options], { prefix: \"formly-form options check\" });\n\t          $scope.options = $scope.options || {};\n\t          $scope.options.formState = $scope.options.formState || {};\n\t\n\t          angular.extend($scope.options, {\n\t            updateInitialValue: updateInitialValue,\n\t            resetModel: resetModel\n\t          });\n\t        }\n\t\n\t        function updateInitialValue() {\n\t          angular.forEach($scope.fields, function (field) {\n\t            return field.updateInitialValue();\n\t          });\n\t        }\n\t\n\t        function resetModel() {\n\t          angular.forEach($scope.fields, function (field) {\n\t            return field.resetModel();\n\t          });\n\t        }\n\t\n\t        function attachKey(field, index) {\n\t          field.key = field.key || index || 0;\n\t        }\n\t\n\t        function setupWatchers(field, index) {\n\t          if (!angular.isDefined(field.watcher)) {\n\t            return;\n\t          }\n\t          var watchers = field.watcher;\n\t          if (!angular.isArray(watchers)) {\n\t            watchers = [watchers];\n\t          }\n\t          angular.forEach(watchers, function (watcher) {\n\t            if (!angular.isDefined(watcher.listener)) {\n\t              throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t            }\n\t            var watchExpression = getWatchExpression(watcher, field, index);\n\t            var watchListener = getWatchListener(watcher, field, index);\n\t\n\t            var type = watcher.type || \"$watch\";\n\t            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t          });\n\t        }\n\t\n\t        function getWatchExpression(watcher, field, index) {\n\t          var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t          if (angular.isFunction(watchExpression)) {\n\t            // wrap the field's watch expression so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalExpression = watchExpression;\n\t            watchExpression = function formlyWatchExpression() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalExpression.apply(undefined, _toConsumableArray(args));\n\t            };\n\t            watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t          }\n\t          return watchExpression;\n\t        }\n\t\n\t        function getWatchListener(watcher, field, index) {\n\t          var watchListener = watcher.listener;\n\t          if (angular.isFunction(watchListener)) {\n\t            // wrap the field's watch listener so we can call it with the field as the first arg\n\t            // and the stop function as the last arg as a helper\n\t            var originalListener = watchListener;\n\t            watchListener = function formlyWatchListener() {\n\t              var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t              return originalListener.apply(undefined, _toConsumableArray(args));\n\t            };\n\t            watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t          }\n\t          return watchListener;\n\t        }\n\t\n\t        function modifyArgs(watcher, index) {\n\t          for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t            originalArgs[_key - 2] = arguments[_key];\n\t          }\n\t\n\t          return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n\t        }\n\t      }],\n\t      link: function link(scope, el, attrs) {\n\t        if (attrs.form) {\n\t          var formId = attrs.name;\n\t          $parse(attrs.form).assign(scope.$parent, scope[formId]);\n\t        }\n\t\n\t        // chrome autocomplete lameness\n\t        // see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n\t        // ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n\t        var global = formlyConfig.extras.removeChromeAutoComplete === true;\n\t        var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n\t        var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n\t        if (global && !offInstance || onInstance) {\n\t          var input = document.createElement(\"input\");\n\t          input.setAttribute(\"autocomplete\", \"address-level4\");\n\t          input.setAttribute(\"hidden\", true);\n\t          el[0].appendChild(input);\n\t        }\n\t      }\n\t    };\n\t  }\n\t  formlyForm.$inject = [\"formlyUsability\", \"$parse\", \"formlyApiCheck\", \"formlyConfig\"];\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(5)(ngModule);\n\t  __webpack_require__(6)(ngModule);\n\t  __webpack_require__(8)(ngModule);\n\t  __webpack_require__(7)(ngModule);\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar apiCheck = __webpack_require__(4);\n\tif (!apiCheck) {\n\t  throw new Error(\"angular-formly requires the library apiCheck.js! Please include it! \" + __webpack_require__(2) + \"apicheckjs-dependency-required\");\n\t}\n\tvar ngModuleName = \"formly\";\n\tvar angular = __webpack_require__(1);\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\t__webpack_require__(17)(ngModule);\n\t__webpack_require__(23)(ngModule);\n\t__webpack_require__(9)(ngModule);\n\t__webpack_require__(20)(ngModule);\n\t\n\tmodule.exports = ngModuleName;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t\n\t  var apiCheck = __webpack_require__(4)({\n\t    output: {\n\t      prefix: \"angular-formly:\",\n\t      docsBaseUrl: __webpack_require__(2)\n\t    }\n\t  });\n\t\n\t  function shapeRequiredIfNot(otherProps, propChecker) {\n\t    if (!angular.isArray(otherProps)) {\n\t      otherProps = [otherProps];\n\t    }\n\t    var type = \"specified if these are not specified: `\" + otherProps.join(\", \") + \"` (otherwise it's optional)\";\n\t    function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t      var propExists = obj && obj.hasOwnProperty(propName);\n\t      var otherPropsExist = otherProps.some(function (otherProp) {\n\t        return obj && obj.hasOwnProperty(otherProp);\n\t      });\n\t      //console.log(propName, propExists, prop, otherPropsExist, otherProps.join(', '));\n\t      if (!otherPropsExist && !propExists) {\n\t        return apiCheck.utils.getError(propName, location, type);\n\t      } else if (propExists) {\n\t        return propChecker(prop, propName, location, obj);\n\t      }\n\t    }\n\t    shapeRequiredIfNotDefinition.type = type;\n\t    return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n\t  }\n\t\n\t  ngModule.constant(\"formlyApiCheck\", apiCheck);\n\t  if (false) {\n\t    require(\"./formlyApiCheck.test\")(ngModule);\n\t  }\n\t\n\t  var formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n\t  var specifyWrapperType = apiCheck.oneOfType([apiCheck.oneOf([null]), apiCheck.typeOrArrayOf(apiCheck.string)]);\n\t\n\t  var apiCheckProperty = apiCheck.objectOf(apiCheck.func);\n\t\n\t  var apiCheckInstanceProperty = apiCheck.shape.onlyIf(\"apiCheck\", apiCheck.func.withProperties({\n\t    warn: apiCheck.func,\n\t    \"throw\": apiCheck.func,\n\t    shape: apiCheck.func\n\t  }));\n\t\n\t  var apiCheckFunctionProperty = apiCheck.shape.onlyIf(\"apiCheck\", apiCheck.oneOf([\"throw\", \"warn\"]));\n\t\n\t  var formlyWrapperType = apiCheck.shape({\n\t    name: shapeRequiredIfNot(\"types\", apiCheck.string).optional,\n\t    template: apiCheck.shape.ifNot(\"templateUrl\", apiCheck.string).optional,\n\t    templateUrl: apiCheck.shape.ifNot(\"template\", apiCheck.string).optional,\n\t    types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t    overwriteOk: apiCheck.bool.optional,\n\t    validateOptions: apiCheck.func.optional,\n\t    apiCheck: apiCheckProperty.optional,\n\t    apiCheckInstance: apiCheckInstanceProperty.optional,\n\t    apiCheckFunction: apiCheckFunctionProperty.optional,\n\t    apiCheckOptions: apiCheck.object.optional\n\t  }).strict;\n\t\n\t  var fieldOptionsApiShape = {\n\t    type: apiCheck.shape.ifNot([\"template\", \"templateUrl\"], apiCheck.string).optional,\n\t    template: apiCheck.shape.ifNot([\"type\", \"templateUrl\"], apiCheck.string).optional,\n\t    templateUrl: apiCheck.shape.ifNot([\"type\", \"template\"], apiCheck.string).optional,\n\t    key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]),\n\t    model: apiCheck.object.optional,\n\t    expressionProperties: apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t      expression: formlyExpression,\n\t      message: formlyExpression.optional\n\t    }).strict])).optional,\n\t    data: apiCheck.object.optional,\n\t    templateOptions: apiCheck.object.optional,\n\t    wrapper: specifyWrapperType.optional,\n\t    modelOptions: apiCheck.shape({\n\t      updateOn: apiCheck.string.optional,\n\t      debounce: apiCheck.oneOfType([apiCheck.object, apiCheck.string]).optional,\n\t      allowInvalid: apiCheck.bool.optional,\n\t      getterSetter: apiCheck.bool.optional,\n\t      timezone: apiCheck.string.optional\n\t    }).optional,\n\t    watcher: apiCheck.typeOrArrayOf(apiCheck.shape({\n\t      expression: formlyExpression.optional,\n\t      listener: formlyExpression\n\t    })).optional,\n\t    validators: apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t      expression: formlyExpression,\n\t      message: formlyExpression.optional\n\t    }).strict])).optional,\n\t    noFormControl: apiCheck.bool.optional,\n\t    hide: apiCheck.bool.optional,\n\t    ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n\t      expression: apiCheck.shape.ifNot([\"value\", \"attribute\", \"bound\"], apiCheck.any).optional,\n\t      value: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional,\n\t      attribute: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional,\n\t      bound: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional\n\t    }).strict).optional,\n\t    optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t    link: apiCheck.func.optional,\n\t    controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n\t    validation: apiCheck.shape({\n\t      show: apiCheck.oneOfType([apiCheck.bool, apiCheck.oneOf([null])]).optional,\n\t      messages: apiCheck.objectOf(formlyExpression).optional,\n\t      errorExistsAndShouldBeVisible: apiCheck.bool.optional\n\t    }).optional,\n\t    formControl: apiCheck.object.optional,\n\t    value: apiCheck.func.optional,\n\t    runExpressions: apiCheck.func.optional,\n\t    resetModel: apiCheck.func.optional,\n\t    updateInitialValue: apiCheck.func.optional,\n\t    initialValue: apiCheck.any.optional\n\t  };\n\t\n\t  var formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\t\n\t  var typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape);\n\t  typeOptionsDefaultOptions.key = apiCheck.string.optional;\n\t\n\t  var formlyTypeOptions = apiCheck.shape({\n\t    name: apiCheck.string,\n\t    template: apiCheck.shape.ifNot(\"templateUrl\", apiCheck.string).optional,\n\t    templateUrl: apiCheck.shape.ifNot(\"template\", apiCheck.string).optional,\n\t    controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n\t    link: apiCheck.func.optional,\n\t    defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n\t    \"extends\": apiCheck.string.optional,\n\t    wrapper: specifyWrapperType.optional,\n\t    data: apiCheck.object.optional,\n\t    validateOptions: apiCheck.func.optional,\n\t    apiCheck: apiCheckProperty.optional,\n\t    apiCheckInstance: apiCheckInstanceProperty.optional,\n\t    apiCheckFunction: apiCheckFunctionProperty.optional,\n\t    apiCheckOptions: apiCheck.object.optional,\n\t    overwriteOk: apiCheck.bool.optional\n\t  }).strict;\n\t\n\t  angular.extend(apiCheck, {\n\t    formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType\n\t  });\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\tvar utils = __webpack_require__(3);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyConfig\", formlyConfig);\n\t\n\t  formlyConfig.tests = false ? require(\"./formlyConfig.test\")(ngModule) : null;\n\t\n\t  function formlyConfig(formlyUsabilityProvider, formlyApiCheck) {\n\t    var _this2 = this;\n\t\n\t    var typeMap = {};\n\t    var templateWrappersMap = {};\n\t    var defaultWrapperName = \"default\";\n\t    var _this = this;\n\t    var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t    angular.extend(this, {\n\t      setType: setType,\n\t      getType: getType,\n\t      setWrapper: setWrapper,\n\t      getWrapper: getWrapper,\n\t      getWrapperByType: getWrapperByType,\n\t      removeWrapperByName: removeWrapperByName,\n\t      removeWrappersForType: removeWrappersForType,\n\t      disableWarnings: false,\n\t      extras: {\n\t        disableNgModelAttrsManipulator: false,\n\t        ngModelAttrsManipulatorPreferUnbound: false,\n\t        removeChromeAutoComplete: false\n\t      },\n\t      templateManipulators: {\n\t        preWrapper: [],\n\t        postWrapper: []\n\t      },\n\t      $get: function () {\n\t        return _this2;\n\t      }\n\t    });\n\t\n\t    function setType(options) {\n\t      if (angular.isArray(options)) {\n\t        angular.forEach(options, setType);\n\t      } else if (angular.isObject(options)) {\n\t        checkType(options);\n\t        if (options[\"extends\"]) {\n\t          extendTypeOptions(options);\n\t        }\n\t        typeMap[options.name] = options;\n\t      } else {\n\t        throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n\t      }\n\t    }\n\t\n\t    function checkType(options) {\n\t      formlyApiCheck[\"throw\"](formlyApiCheck.formlyTypeOptions, options, {\n\t        prefix: \"formlyConfig.setType\",\n\t        url: \"settype-validation-failed\"\n\t      });\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, typeMap, options, \"types\");\n\t      } else {\n\t        options.overwriteOk = undefined;\n\t      }\n\t    }\n\t\n\t    function extendTypeOptions(options) {\n\t      var extendsType = getType(options[\"extends\"], true, options);\n\t      extendTypeControllerFunction(options, extendsType);\n\t      extendTypeLinkFunction(options, extendsType);\n\t      extendTypeValidateOptionsFunction(options, extendsType);\n\t      extendTypeDefaultOptions(options, extendsType);\n\t      utils.reverseDeepMerge(options, extendsType);\n\t    }\n\t\n\t    function extendTypeControllerFunction(options, extendsType) {\n\t      var extendsCtrl = extendsType.controller;\n\t      if (!angular.isDefined(extendsCtrl)) {\n\t        return;\n\t      }\n\t      var optionsCtrl = options.controller;\n\t      if (angular.isDefined(optionsCtrl)) {\n\t        options.controller = function ($scope, $controller) {\n\t          $controller(extendsCtrl, { $scope: $scope });\n\t          $controller(optionsCtrl, { $scope: $scope });\n\t        };\n\t        options.controller.$inject = [\"$scope\", \"$controller\"];\n\t      } else {\n\t        options.controller = extendsCtrl;\n\t      }\n\t    }\n\t\n\t    function extendTypeLinkFunction(options, extendsType) {\n\t      var extendsFn = extendsType.link;\n\t      if (!angular.isDefined(extendsFn)) {\n\t        return;\n\t      }\n\t      var optionsFn = options.link;\n\t      if (angular.isDefined(optionsFn)) {\n\t        options.link = function () {\n\t          extendsFn.apply(undefined, arguments);\n\t          optionsFn.apply(undefined, arguments);\n\t        };\n\t      } else {\n\t        options.link = extendsFn;\n\t      }\n\t    }\n\t\n\t    function extendTypeValidateOptionsFunction(options, extendsType) {\n\t      var extendsFn = extendsType.validateOptions;\n\t      if (!angular.isDefined(extendsFn)) {\n\t        return;\n\t      }\n\t      var optionsFn = options.validateOptions;\n\t      var originalDefaultOptions = options.defaultOptions;\n\t      if (angular.isDefined(optionsFn)) {\n\t        options.validateOptions = function (options) {\n\t          optionsFn(options);\n\t          var mergedOptions = angular.copy(options);\n\t          var defaultOptions = originalDefaultOptions;\n\t          if (defaultOptions) {\n\t            if (angular.isFunction(defaultOptions)) {\n\t              defaultOptions = defaultOptions(mergedOptions);\n\t            }\n\t            utils.reverseDeepMerge(mergedOptions, defaultOptions);\n\t          }\n\t          extendsFn(mergedOptions);\n\t        };\n\t      } else {\n\t        options.validateOptions = extendsFn;\n\t      }\n\t    }\n\t\n\t    function extendTypeDefaultOptions(options, extendsType) {\n\t      var extendsDO = extendsType.defaultOptions;\n\t      if (!angular.isDefined(extendsDO)) {\n\t        return;\n\t      }\n\t      var optionsDO = options.defaultOptions;\n\t      var optionsDOIsFn = angular.isFunction(optionsDO);\n\t      var extendsDOIsFn = angular.isFunction(extendsDO);\n\t      if (extendsDOIsFn) {\n\t        options.defaultOptions = function defaultOptions(options) {\n\t          var extendsDefaultOptions = extendsDO(options);\n\t          var mergedDefaultOptions = {};\n\t          utils.reverseDeepMerge(mergedDefaultOptions, options, extendsDefaultOptions);\n\t          var extenderOptionsDefaultOptions = optionsDO;\n\t          if (optionsDOIsFn) {\n\t            extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);\n\t          }\n\t          utils.reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n\t          return extendsDefaultOptions;\n\t        };\n\t      } else if (optionsDOIsFn) {\n\t        options.defaultOptions = function defaultOptions(options) {\n\t          var newDefaultOptions = {};\n\t          utils.reverseDeepMerge(newDefaultOptions, options, extendsDO);\n\t          return optionsDO(newDefaultOptions);\n\t        };\n\t      }\n\t    }\n\t\n\t    function getType(name, throwError, errorContext) {\n\t      if (!name) {\n\t        return undefined;\n\t      }\n\t      var type = typeMap[name];\n\t      if (!type && throwError === true) {\n\t        throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n\t      } else {\n\t        return type;\n\t      }\n\t    }\n\t\n\t    function setWrapper(_x, _x2) {\n\t      var _again = true;\n\t\n\t      _function: while (_again) {\n\t        _again = false;\n\t        var options = _x,\n\t            name = _x2;\n\t\n\t        if (angular.isArray(options)) {\n\t          return options.map(function (wrapperOptions) {\n\t            return setWrapper(wrapperOptions);\n\t          });\n\t        } else if (angular.isObject(options)) {\n\t          options.types = getOptionsTypes(options);\n\t          options.name = getOptionsName(options, name);\n\t          checkWrapperAPI(options);\n\t          templateWrappersMap[options.name] = options;\n\t          return options;\n\t        } else if (angular.isString(options)) {\n\t          _x = {\n\t            template: options,\n\t            name: name\n\t          };\n\t          _again = true;\n\t          continue _function;\n\t        }\n\t      }\n\t    }\n\t\n\t    function getOptionsTypes(options) {\n\t      if (angular.isString(options.types)) {\n\t        return [options.types];\n\t      }\n\t      if (!angular.isDefined(options.types)) {\n\t        return [];\n\t      } else {\n\t        return options.types;\n\t      }\n\t    }\n\t\n\t    function getOptionsName(options, name) {\n\t      return options.name || name || options.types.join(\" \") || defaultWrapperName;\n\t    }\n\t\n\t    function checkWrapperAPI(options) {\n\t      formlyUsabilityProvider.checkWrapper(options);\n\t      if (options.template) {\n\t        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t      }\n\t      if (!options.overwriteOk) {\n\t        checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n\t      } else {\n\t        delete options.overwriteOk;\n\t      }\n\t      checkWrapperTypes(options);\n\t    }\n\t\n\t    function checkWrapperTypes(options) {\n\t      var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n\t      if (shouldThrow) {\n\t        throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n\t      }\n\t    }\n\t\n\t    function checkOverwrite(property, object, newValue, objectName) {\n\t      if (object.hasOwnProperty(property)) {\n\t        warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n\t      }\n\t    }\n\t\n\t    function getWrapper(name) {\n\t      return templateWrappersMap[name || defaultWrapperName];\n\t    }\n\t\n\t    function getWrapperByType(type) {\n\t      /* jshint maxcomplexity:6 */\n\t      var wrappers = [];\n\t      for (var name in templateWrappersMap) {\n\t        if (templateWrappersMap.hasOwnProperty(name)) {\n\t          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n\t            wrappers.push(templateWrappersMap[name]);\n\t          }\n\t        }\n\t      }\n\t      return wrappers;\n\t    }\n\t\n\t    function removeWrapperByName(name) {\n\t      var wrapper = templateWrappersMap[name];\n\t      delete templateWrappersMap[name];\n\t      return wrapper;\n\t    }\n\t\n\t    function removeWrappersForType(type) {\n\t      var wrappers = getWrapperByType(type);\n\t      if (!wrappers) {\n\t        return;\n\t      }\n\t      if (!angular.isArray(wrappers)) {\n\t        return removeWrapperByName(wrappers.name);\n\t      } else {\n\t        wrappers.forEach(function (wrapper) {\n\t          return removeWrapperByName(wrapper.name);\n\t        });\n\t        return wrappers;\n\t      }\n\t    }\n\t\n\t    function warn() {\n\t      if (!_this.disableWarnings) {\n\t        console.warn.apply(console, arguments);\n\t      }\n\t    }\n\t  }\n\t  formlyConfig.$inject = [\"formlyUsabilityProvider\", \"formlyApiCheck\"];\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", \"https://github.com/formly-js/angular-formly/blob/\" + (\"6.0.0-beta.7\") + \"/other/ERRORS_AND_WARNINGS.md#\");\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.provider(\"formlyUsability\", [\"formlyVersion\", \"formlyApiCheck\", function (formlyVersion, formlyApiCheck) {\n\t    var _this = this;\n\t\n\t    var errorsAndWarningsUrlPrefix = \"https://github.com/formly-js/angular-formly/blob/\" + formlyVersion + \"/other/ERRORS_AND_WARNINGS.md#\";\n\t    angular.extend(this, {\n\t      getFormlyError: getFormlyError,\n\t      getFieldError: getFieldError,\n\t      checkWrapper: checkWrapper,\n\t      checkWrapperTemplate: checkWrapperTemplate,\n\t      $get: function () {\n\t        return _this;\n\t      }\n\t    });\n\t\n\t    function getFieldError(errorInfoSlug, message, field) {\n\t      if (arguments.length < 3) {\n\t        field = message;\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n\t    }\n\t\n\t    function getFormlyError(errorInfoSlug, message) {\n\t      if (!message) {\n\t        message = errorInfoSlug;\n\t        errorInfoSlug = null;\n\t      }\n\t      return new Error(getErrorMessage(errorInfoSlug, message));\n\t    }\n\t\n\t    function getErrorMessage(errorInfoSlug, message) {\n\t      var url = \"\";\n\t      if (errorInfoSlug !== null) {\n\t        url = \"\" + errorsAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t      }\n\t      return \"Formly Error: \" + message + \". \" + url;\n\t    }\n\t\n\t    function checkWrapper(wrapper) {\n\t      formlyApiCheck[\"throw\"](formlyApiCheck.formlyWrapperType, wrapper, {\n\t        prefix: \"formlyConfig.setWrapper\",\n\t        urlSuffix: \"setwrapper-validation-failed\"\n\t      });\n\t    }\n\t\n\t    function checkWrapperTemplate(template, additionalInfo) {\n\t      var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n\t      if (template.indexOf(formlyTransclude) === -1) {\n\t        throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n\t      }\n\t    }\n\t  }]);\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyValidationMessages\", function () {\n\t\n\t    var formlyValidationMessages = {\n\t      addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t      addStringMessage: addStringMessage,\n\t      messages: {}\n\t    };\n\t\n\t    return formlyValidationMessages;\n\t\n\t    function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t      formlyValidationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t    }\n\t\n\t    function addStringMessage(name, string) {\n\t      formlyValidationMessages.messages[name] = function () {\n\t        return string;\n\t      };\n\t    }\n\t\n\t    function templateOptionValue(prop, prefix, suffix, alternate) {\n\t      return function getValidationMessage(viewValue, modelValue, scope) {\n\t        if (scope.options.templateOptions[prop]) {\n\t          return \"\" + prefix + \" \" + scope.options.templateOptions[prop] + \" \" + suffix;\n\t        } else {\n\t          return alternate;\n\t        }\n\t      };\n\t    }\n\t  });\n\t};\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.constant(\"formlyVersion\", (\"6.0.0-beta.7\"));\n\t};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(11)(ngModule);\n\t  __webpack_require__(14)(ngModule);\n\t  __webpack_require__(12)(ngModule);\n\t  __webpack_require__(16)(ngModule);\n\t  __webpack_require__(13)(ngModule);\n\t  __webpack_require__(15)(ngModule);\n\t};\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.run(addCustomTags);\n\t\n\t  function addCustomTags($document) {\n\t\n\t    if ($document && $document.get) {\n\t      //IE8 check ->\n\t      // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203\n\t      var document = $document.get(0);\n\t      var div = document.createElement(\"div\");\n\t      div.innerHTML = \"<!--[if lt IE 9]><i></i><![endif]-->\";\n\t      var isIeLessThan9 = div.getElementsByTagName(\"i\").length === 1;\n\t\n\t      if (isIeLessThan9) {\n\t        //add the custom elements that we need for formly\n\t        var customElements = [\"formly-field\", \"formly-form\", \"formly-custom-validation\", \"formly-focus\", \"formly-transpose\"];\n\t\n\t        for (var i = 0; i < customElements.length; i++) {\n\t          document.createElement(customElements[i]);\n\t        }\n\t      }\n\t    }\n\t  }\n\t  addCustomTags.$inject = [\"$document\"];\n\t};\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(1);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.run(addFormlyNgModelAttrsManipulator);\n\t\n\t  addFormlyNgModelAttrsManipulator.test = false ? require(\"./formlyNgModelAttrsManipulator.test\")(ngModule) : null;\n\t\n\t  function addFormlyNgModelAttrsManipulator(formlyConfig) {\n\t    if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t      return;\n\t    }\n\t    formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\t\n\t    function ngModelAttrsManipulator(template, options, scope) {\n\t      /* jshint maxcomplexity:6 */\n\t      var el = document.createElement(\"div\");\n\t      var data = options.data;\n\t      if (data.skipNgModelAttrsManipulator === true) {\n\t        return template;\n\t      }\n\t      el.innerHTML = template;\n\t      var modelNodes = el.querySelectorAll(\"[ng-model]\");\n\t      if (!modelNodes || !modelNodes.length) {\n\t        return template;\n\t      }\n\t\n\t      addIfNotPresent(modelNodes, \"id\", scope.id);\n\t      addIfNotPresent(modelNodes, \"name\", scope.id);\n\t\n\t      addValidation();\n\t      addModelOptions();\n\t      addTemplateOptionsAttrs();\n\t\n\t      return el.innerHTML;\n\t\n\t      function addValidation() {\n\t        if (angular.isDefined(options.validators) || angular.isDefined(options.validation.messages)) {\n\t          addIfNotPresent(modelNodes, \"formly-custom-validation\", \"\");\n\t        }\n\t      }\n\t\n\t      function addModelOptions() {\n\t        if (angular.isDefined(options.modelOptions)) {\n\t          addIfNotPresent(modelNodes, \"ng-model-options\", \"options.modelOptions\");\n\t          if (options.modelOptions.getterSetter) {\n\t            angular.forEach(modelNodes, function (node) {\n\t              node.setAttribute(\"ng-model\", \"options.value\");\n\t            });\n\t          }\n\t        }\n\t      }\n\t\n\t      function addTemplateOptionsAttrs() {\n\t        if (!options.templateOptions && !options.expressionProperties) {\n\t          // no need to run these if there are no templateOptions or expressionProperties\n\t          return;\n\t        }\n\t        var to = options.templateOptions || {};\n\t        var ep = options.expressionProperties || {};\n\t\n\t        var ngModelAttributes = getBuiltInAttributes();\n\t\n\t        // extend with the user's specifications winning\n\t        angular.extend(ngModelAttributes, options.ngModelAttrs);\n\t\n\t        // Feel free to make this more simple :-)\n\t        angular.forEach(ngModelAttributes, function (val, name) {\n\t          /* jshint maxcomplexity:14 */\n\t          var attrVal = undefined;\n\t          var attrName = undefined;\n\t          var ref = \"options.templateOptions['\" + name + \"']\";\n\t          var toVal = to[name];\n\t          var epVal = getEpValue(ep, name);\n\t\n\t          var inTo = angular.isDefined(toVal);\n\t          var inEp = angular.isDefined(epVal);\n\t          if (val.value) {\n\t            // I realize this looks backwards, but it's right, trust me...\n\t            attrName = val.value;\n\t            attrVal = name;\n\t          } else if (val.expression && inTo) {\n\t            attrName = val.expression;\n\t            if (angular.isString(to[name])) {\n\t              attrVal = \"$eval(\" + ref + \")\";\n\t            } else if (angular.isFunction(to[name])) {\n\t              attrVal = \"\" + ref + \"(model[options.key], options, this, $event)\";\n\t            } else {\n\t              throw new Error(\"options.templateOptions.\" + name + \" must be a string or function: \" + JSON.stringify(options));\n\t            }\n\t          } else if (val.bound && inEp) {\n\t            attrName = val.bound;\n\t            attrVal = ref;\n\t          } else if ((val.attribute || val.boolean) && inEp) {\n\t            attrName = val.attribute || val.boolean;\n\t            attrVal = \"{{\" + ref + \"}}\";\n\t          } else if (val.attribute && inTo) {\n\t            attrName = val.attribute;\n\t            attrVal = toVal;\n\t          } else if (val.boolean) {\n\t            if (inTo && !inEp && toVal) {\n\t              attrName = val.boolean;\n\t              attrVal = true;\n\t            } else {}\n\t          } else if (val.bound && inTo) {\n\t            attrName = val.bound;\n\t            attrVal = ref;\n\t          }\n\t\n\t          if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n\t            addIfNotPresent(modelNodes, attrName, attrVal);\n\t          }\n\t        });\n\t      }\n\t    }\n\t\n\t    // Utility functions\n\t    function getBuiltInAttributes() {\n\t      var ngModelAttributes = {\n\t        focus: {\n\t          attribute: \"formly-focus\"\n\t        }\n\t      };\n\t      var boundOnly = [];\n\t      var bothBooleanAndBound = [\"required\", \"disabled\"];\n\t      var bothAttributeAndBound = [\"pattern\", \"minlength\"];\n\t      var expressionOnly = [\"change\", \"keydown\", \"keyup\", \"keypress\", \"click\", \"focus\", \"blur\"];\n\t      var attributeOnly = [\"placeholder\", \"min\", \"max\", \"tabindex\", \"type\"];\n\t      if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n\t        bothAttributeAndBound.push(\"maxlength\");\n\t      } else {\n\t        boundOnly.push(\"maxlength\");\n\t      }\n\t\n\t      angular.forEach(boundOnly, function (item) {\n\t        ngModelAttributes[item] = { bound: \"ng-\" + item };\n\t      });\n\t\n\t      angular.forEach(bothBooleanAndBound, function (item) {\n\t        ngModelAttributes[item] = { boolean: item, bound: \"ng-\" + item };\n\t      });\n\t\n\t      angular.forEach(bothAttributeAndBound, function (item) {\n\t        ngModelAttributes[item] = { attribute: item, bound: \"ng-\" + item };\n\t      });\n\t\n\t      angular.forEach(expressionOnly, function (item) {\n\t        var propName = \"on\" + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t        ngModelAttributes[propName] = { expression: \"ng-\" + item };\n\t      });\n\t\n\t      angular.forEach(attributeOnly, function (item) {\n\t        ngModelAttributes[item] = { attribute: item };\n\t      });\n\t      return ngModelAttributes;\n\t    }\n\t\n\t    function getEpValue(ep, name) {\n\t      return ep[\"templateOptions.\" + name] || ep[\"templateOptions['\" + name + \"']\"] || ep[\"templateOptions[\\\"\" + name + \"\\\"]\"];\n\t    }\n\t\n\t    function addIfNotPresent(nodes, attr, val) {\n\t      angular.forEach(nodes, function (node) {\n\t        if (!node.getAttribute(attr)) {\n\t          node.setAttribute(attr, val);\n\t        }\n\t      });\n\t    }\n\t  }\n\t  addFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\"];\n\t};\n\n\t// jshint -W035\n\t// empty to illustrate that a boolean will not be added via val.bound\n\t// if you want it added via val.bound, then put it in expressionProperties\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(19)(ngModule);\n\t  __webpack_require__(18)(ngModule);\n\t};\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar utils = __webpack_require__(3);\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyUtil\", formlyUtil);\n\t\n\t  formlyUtil.tests = false ? require(\"./formlyUtil.test\")(ngModule) : null;\n\t\n\t  function formlyUtil() {\n\t    return utils;\n\t  }\n\t};\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };\n\t\n\tmodule.exports = function (ngModule) {\n\t  ngModule.factory(\"formlyWarn\", [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\", function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t    return function warn() {\n\t      if (!formlyConfig.disableWarnings) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var warnInfoSlug = args.shift();\n\t        args.unshift(\"Formly Warning:\");\n\t        args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t        $log.warn.apply($log, _toConsumableArray(args));\n\t      }\n\t    };\n\t  }]);\n\t};\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = function (ngModule) {\n\t  __webpack_require__(21)(ngModule);\n\t  __webpack_require__(22)(ngModule);\n\t};\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_24__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 836da72e358eb6e0853e\n **/","module.exports = require('./index.common');\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./index.js\n **/","// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require('angular');\nif (!angular.version) {\n  angular = window.angular;\n}\nmodule.exports = angular;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./angular-fix/index.js\n **/","const angular = require('angular-fix');\n\nexport default {formlyEval, getFieldId, reverseDeepMerge, findByNodeName};\n\nfunction formlyEval(scope, expression, $modelValue, $viewValue) {\n  if (angular.isFunction(expression)) {\n    return expression($viewValue, $modelValue, scope);\n  } else {\n    return scope.$eval(expression, {$viewValue, $modelValue});\n  }\n}\n\nfunction getFieldId(formId, options, index) {\n  var type = options.type;\n  if (!type && options.template) {\n    type = 'template';\n  } else if (!type && options.templateUrl) {\n    type = 'templateUrl';\n  }\n\n  return [formId, type, options.key, index].join('_');\n}\n\n\nfunction reverseDeepMerge(dest) {\n  angular.forEach(arguments, (src, index) => {\n    if (!index) {\n      return;\n    }\n    angular.forEach(src, (val, prop) => {\n      if (!angular.isDefined(dest[prop])) {\n        dest[prop] = angular.copy(val);\n      } else if (objAndSameType(dest[prop], val)) {\n        reverseDeepMerge(dest[prop], val);\n      }\n    });\n  });\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return angular.isObject(obj1) && angular.isObject(obj2) &&\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n}\n\n//recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\nfunction findByNodeName(el, nodeName) {\n  if (!el.prop) { // not a jQuery or jqLite object -> wrap it\n    el = angular.element(el);\n  }\n\n  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n    return el;\n  }\n\n  var c = el.children();\n  for(var i = 0; c && i < c.length; i++) {\n    var node = findByNodeName(c[i], nodeName);\n    if (node) {\n      return node;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./other/utils.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = ngModule => {\n  ngModule.directive('formlyCustomValidation', formlyCustomValidation);\n\n  formlyCustomValidation.tests = ON_TEST ? require('./formly-custom-validation.test')(ngModule) : null;\n\n  function formlyCustomValidation(formlyUtil, $q) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, el, attrs, ctrl) {\n        const opts = scope.options;\n        if (opts.validators) {\n          checkValidators(opts.validators);\n        }\n        opts.validation.messages = opts.validation.messages || {};\n        angular.forEach(opts.validation.messages, (message, key) => {\n          opts.validation.messages[key] = () => {\n            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n          };\n        });\n\n\n        var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n        angular.forEach(opts.validators, function(validator, name) {\n          var message = validator.message;\n          if (message) {\n            opts.validation.messages[name] = () => {\n              return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n            };\n          }\n          validator = angular.isObject(validator) ? validator.expression : validator;\n          var isPossiblyAsync = !angular.isString(validator);\n          if (useNewValidatorsApi) {\n            setupWithValidators();\n          } else {\n            setupWithParsers();\n          }\n\n          function setupWithValidators() {\n            var validatorCollection = isPossiblyAsync ? '$asyncValidators' : '$validators';\n            ctrl[validatorCollection][name] = function(modelValue, viewValue) {\n              var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n              if (isPossiblyAsync) {\n                return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n              } else {\n                return value;\n              }\n            };\n          }\n\n          function setupWithParsers() {\n            let inFlightValidator;\n            ctrl.$parsers.unshift(function(viewValue) {\n              var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n              if (isPromiseLike(isValid)) {\n                ctrl.$pending = ctrl.$pending || {};\n                ctrl.$pending[name] = true;\n                inFlightValidator = isValid;\n                isValid.then(() => {\n                  if (inFlightValidator === isValid) {\n                    ctrl.$setValidity(name, true);\n                  }\n                }).catch(() => {\n                  if (inFlightValidator === isValid) {\n                    ctrl.$setValidity(name, false);\n                  }\n                }).finally(() => {\n                  if (Object.keys(ctrl.$pending).length === 1) {\n                    delete ctrl.$pending;\n                  } else {\n                    delete ctrl.$pending[name];\n                  }\n                });\n              } else {\n                ctrl.$setValidity(name, isValid);\n              }\n              return viewValue;\n            });\n          }\n        });\n      }\n    };\n\n    function isPromiseLike(obj) {\n      return obj && angular.isFunction(obj.then);\n    }\n\n    function checkValidators(validators) {\n      var allowedProperties = ['expression', 'message'];\n      var validatorsWithExtraProps = {};\n      angular.forEach(validators, (validator, name) => {\n        if (angular.isString(validator)) {\n          return;\n        }\n        var extraProps = [];\n        angular.forEach(validator, (v, key) => {\n          if (allowedProperties.indexOf(key) === -1) {\n            extraProps.push(key);\n          }\n        });\n        if (extraProps.length) {\n          validatorsWithExtraProps[name] = extraProps;\n        }\n      });\n      if (Object.keys(validatorsWithExtraProps).length) {\n        throw new Error([\n          `Validators are only allowed to be functions or objects that have ${allowedProperties.join(', ')}.`,\n          `You provided some extra properties: ${JSON.stringify(validatorsWithExtraProps)}`\n        ].join(' '));\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-custom-validation.js\n **/","let angular = require('angular-fix');\n\nmodule.exports = ngModule => {\n  ngModule.directive('formlyField', formlyField);\n\n  formlyField.tests = ON_TEST ? require('./formly-field.test')(ngModule) : null;\n\n  /**\n   * @ngdoc directive\n   * @name formlyField\n   * @restrict AE\n   */\n  function formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyApiCheck,\n                       formlyUtil, formlyUsability, formlyWarn) {\n    return {\n      restrict: 'AE',\n      transclude: true,\n      scope: {\n        options: '=',\n        model: '=',\n        formId: '@',\n        index: '=?',\n        fields: '=?',\n        formState: '=?',\n        form: '=?'\n      },\n      controller: function fieldController($scope, $timeout, $parse, $controller) {\n        var opts = $scope.options;\n        var fieldType = opts.type && formlyConfig.getType(opts.type);\n        simplifyLife(opts);\n        mergeFieldOptionsWithTypeDefaults(opts, fieldType);\n        extendOptionsWithDefaults(opts, $scope.index);\n        checkApi(opts);\n        // set field id to link labels and fields\n        $scope.id = formlyUtil.getFieldId($scope.formId, opts, $scope.index);\n\n        // initalization\n        runExpressions();\n        setFormControl($scope, opts);\n        addModelWatcher($scope, opts);\n        addValidationMessages(opts);\n        // simplify things\n        // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n        $scope.to = $scope.options.templateOptions;\n        invokeControllers($scope, opts, fieldType);\n\n        // function definitions\n        function runExpressions() {\n          $timeout(function() { // must run on next tick to make sure that the current value is correct.\n            var field = $scope.options;\n            var currentValue = valueGetterSetter();\n            angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n              var setter = $parse(prop).assign;\n              var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n              promise.then(function(value) {\n                setter(field, value);\n              });\n            });\n          });\n        }\n\n        function valueGetterSetter(newVal) {\n          if (!$scope.model || !$scope.options.key) {\n            return;\n          }\n          if (angular.isDefined(newVal)) {\n            $scope.model[$scope.options.key] = newVal;\n          }\n          return $scope.model[$scope.options.key];\n        }\n\n        function simplifyLife(options) {\n          // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n          formlyUtil.reverseDeepMerge(options, {\n            data: {},\n            templateOptions: {},\n            validation: {}\n          });\n        }\n\n        function mergeFieldOptionsWithTypeDefaults(options, type) {\n          if (type) {\n            mergeOptions(options, type.defaultOptions);\n          }\n          var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n          angular.forEach(properOrder, typeName => {\n            mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n          });\n        }\n\n        function mergeOptions(options, extraOptions) {\n          if (extraOptions) {\n            if (angular.isFunction(extraOptions)) {\n              extraOptions = extraOptions(options);\n            }\n            formlyUtil.reverseDeepMerge(options, extraOptions);\n          }\n        }\n\n        function extendOptionsWithDefaults(options, index) {\n          const key = options.key || index || 0;\n          const initialValue = $scope.model && $scope.model[key];\n          angular.extend(options, {\n            // attach the key in case the formly-field directive is used directly\n            key,\n            value: valueGetterSetter,\n            runExpressions,\n            resetModel,\n            updateInitialValue,\n            initialValue\n          });\n        }\n\n        // initialization functions\n        function setFormControl(scope, options) {\n          if (options.noFormControl) {\n            return;\n          }\n          scope.$watch('form[\"' + scope.id + '\"]', function(formControl) {\n            if (formControl) {\n              scope.fc = formControl; // shortcut for template authors\n              scope.options.formControl = formControl;\n              addShowMessagesWatcher(scope, options);\n            }\n          });\n        }\n\n        function addModelWatcher(scope, options) {\n          if (options.model) {\n            scope.$watch('options.model', runExpressions, true);\n          }\n        }\n\n        function addShowMessagesWatcher(scope, options) {\n          scope.$watch(function() {\n            if (typeof scope.options.validation.show === 'boolean') {\n              return scope.fc.$invalid && scope.options.validation.show;\n            } else {\n              let noTouchedButDirty = (angular.isUndefined(scope.fc.$touched) && scope.fc.$dirty);\n              return scope.fc.$invalid && (scope.fc.$touched || noTouchedButDirty);\n            }\n          }, function(show) {\n            options.validation.errorExistsAndShouldBeVisible = show;\n            scope.showError = show; // shortcut for template authors\n          });\n        }\n\n        function resetModel() {\n          $scope.model[$scope.options.key] = $scope.options.initialValue;\n          if ($scope.options.formControl) {\n            $scope.options.formControl.$setViewValue($scope.model[$scope.options.key]);\n            $scope.options.formControl.$render();\n          }\n        }\n\n        function updateInitialValue() {\n          $scope.options.initialValue = $scope.model[$scope.options.key];\n        }\n\n        function addValidationMessages(options) {\n          options.validation.messages = options.validation.messages || {};\n          angular.forEach(formlyValidationMessages.messages, function(expression, name) {\n            if (!options.validation.messages[name]) {\n              options.validation.messages[name] = function(viewValue, modelValue, scope) {\n                return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n              };\n            }\n          });\n        }\n\n        function invokeControllers(scope, options = {}, type = {}) {\n          angular.forEach([type.controller, options.controller], controller => {\n            if (controller) {\n              $controller(controller, {$scope: scope});\n            }\n          });\n        }\n      },\n      link: function fieldLink(scope, el) {\n        var type = scope.options.type && formlyConfig.getType(scope.options.type);\n        var args = arguments;\n        var thusly = this;\n        getFieldTemplate(scope.options)\n          .then(runManipulators(formlyConfig.templateManipulators.preWrapper))\n          .then(transcludeInWrappers(scope.options))\n          .then(runManipulators(formlyConfig.templateManipulators.postWrapper))\n          .then(setElementTemplate)\n          .catch(error => {\n            formlyWarn(\n              'there-was-a-problem-setting-the-template-for-this-field',\n              'There was a problem setting the template for this field ',\n              scope.options,\n              error\n            );\n          });\n\n        function setElementTemplate(templateEl) {\n          el.html(asHtml(templateEl));\n          $compile(el.contents())(scope);\n          if (type && type.link) {\n            type.link.apply(thusly, args);\n          }\n          if (scope.options.link) {\n            scope.options.link.apply(thusly, args);\n          }\n        }\n\n        function runManipulators(manipulators) {\n          return function runManipulatorsOnTemplate(template) {\n            var chain = $q.when(template);\n            angular.forEach(manipulators, manipulator => {\n              chain = chain.then(template => {\n                return $q.when(manipulator(template, scope.options, scope)).then(newTemplate => {\n                  return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n                });\n              });\n            });\n            return chain;\n          };\n        }\n      }\n    };\n\n    function asHtml(el) {\n      var wrapper = angular.element('<a></a>');\n      return wrapper.append(el).html();\n    }\n\n    function getFieldTemplate(options) {\n      let type = formlyConfig.getType(options.type, true, options);\n      let template = options.template || type && type.template;\n      let templateUrl = options.templateUrl || type && type.templateUrl;\n      if (!template && !templateUrl) {\n        throw formlyUsability.getFieldError(\n          'type-type-has-no-template',\n          `Type '${options.type}' has not template. On element:`, options\n        );\n      }\n      return getTemplate(template || templateUrl, !template);\n    }\n\n\n    function getTemplate(template, isUrl) {\n      if (!isUrl) {\n        return $q.when(template);\n      } else {\n        let httpOptions = {cache: $templateCache};\n        return $http.get(template, httpOptions).then(function(response) {\n          return response.data;\n        }).catch(function(error) {\n          formlyWarn(\n            'problem-loading-template-for-templateurl',\n            'Problem loading template for ' + template,\n            error\n          );\n        });\n      }\n    }\n\n    function transcludeInWrappers(options) {\n      let wrapper = getWrapperOption(options);\n\n      return function transcludeTemplate(template) {\n        if (!wrapper.length) {\n          return $q.when(template);\n        }\n\n        wrapper.forEach((wrapper) => {\n          formlyUsability.checkWrapper(wrapper, options);\n          wrapper.validateOptions && wrapper.validateOptions(options);\n          runApiCheck(wrapper, options);\n        });\n        let promises = wrapper.map(w => getTemplate(w.template || w.templateUrl, !w.template));\n        return $q.all(promises).then(wrappersTemplates => {\n          wrappersTemplates.forEach((wrapperTemplate, index) => {\n            formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n          });\n          wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n          let totalWrapper = wrappersTemplates.shift();\n          wrappersTemplates.forEach(wrapperTemplate => {\n            totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n          });\n          return doTransclusion(totalWrapper, template);\n        });\n      };\n    }\n\n    function doTransclusion(wrapper, template) {\n      let superWrapper = angular.element('<a></a>'); // this allows people not have to have a single root in wrappers\n      superWrapper.append(wrapper);\n      let transcludeEl = superWrapper.find('formly-transclude');\n      if (!transcludeEl.length) {\n        //try it using our custom find function\n        transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n      }\n      transcludeEl.replaceWith(template);\n      return superWrapper.html();\n    }\n\n    function getWrapperOption(options) {\n      let wrapper = options.wrapper;\n      // explicit null means no wrapper\n      if (wrapper === null) {\n        return [];\n      }\n\n      // nothing specified means use the default wrapper for the type\n      if (!wrapper) {\n        // get all wrappers that specify they apply to this type\n        wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n      } else {\n        wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n      }\n\n      // get all wrappers for that this type specified that it uses.\n      var type = formlyConfig.getType(options.type, true, options);\n      if (type && type.wrapper) {\n        let typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n        wrapper = wrapper.concat(typeWrappers);\n      }\n\n      // add the default wrapper last\n      var defaultWrapper = formlyConfig.getWrapper();\n      if (defaultWrapper) {\n        wrapper.push(defaultWrapper);\n      }\n      return wrapper;\n    }\n\n    function checkApi(options) {\n      formlyApiCheck.throw(formlyApiCheck.formlyFieldOptions, options, {\n        prefix: 'formly-field directive',\n        url: 'formly-field-directive-validation-failed'\n      });\n      // validate with the type\n      const type = options.type && formlyConfig.getType(options.type);\n      if (type) {\n        if (type.validateOptions) {\n          type.validateOptions(options);\n        }\n        runApiCheck(type, options);\n      }\n    }\n\n    function runApiCheck({apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions}, options) {\n      if (!apiCheck) {\n        return;\n      }\n      const instance = apiCheckInstance || formlyApiCheck;\n      const fn = apiCheckFunction || 'warn';\n      const shape = instance.shape(apiCheck);\n      instance[fn](shape, options, apiCheckOptions || {\n        prefix: `formly-field ${name}`,\n        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n      });\n    }\n\n  }\n\n  function arrayify(obj) {\n    if (obj && !angular.isArray(obj)) {\n      obj = [obj];\n    } else if (!obj) {\n      obj = [];\n    }\n    return obj;\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-field.js\n **/","module.exports = ngModule => {\n  ngModule.directive('formlyFocus', function($timeout, $document) {\n    /* jshint -W052 */\n    return {\n      restrict: 'A',\n      link: function(scope, element, attrs) {\n        var previousEl = null;\n        var el = element[0];\n        var doc = $document[0];\n        attrs.$observe('formlyFocus', function(value) {\n          if (value === 'true') {\n            $timeout(function() {\n              previousEl = doc.activeElement;\n              el.focus();\n            }, ~~attrs.focusWait);\n          } else if (value === 'false') {\n            if (doc.activeElement === el) {\n              el.blur();\n              if (attrs.hasOwnProperty('refocus') && previousEl) {\n                previousEl.focus();\n              }\n            }\n          }\n        });\n      }\n    };\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-focus.js\n **/","let angular = require('angular-fix');\n\nmodule.exports = ngModule => {\n  ngModule.directive('formlyForm', formlyForm);\n\n  formlyForm.tests = ON_TEST ? require('./formly-form.test')(ngModule) : null;\n\n  /**\n   * @ngdoc directive\n   * @name formlyForm\n   * @restrict E\n   */\n  function formlyForm(formlyUsability, $parse, formlyApiCheck, formlyConfig) {\n    var currentFormId = 1;\n    var optionsApi = [\n      formlyApiCheck.shape({\n        formState: formlyApiCheck.object.optional,\n        resetModel: formlyApiCheck.func.optional,\n        updateInitialValue: formlyApiCheck.func.optional,\n        removeChromeAutoComplete: formlyApiCheck.bool.optional\n      }).strict.optional\n    ];\n    return {\n      restrict: 'E',\n      template: function(el, attrs) {\n        /* jshint -W033 */ // this because jshint is broken I guess...\n        const rootEl = attrs.rootEl || 'ng-form';\n        const formName = `formly_${currentFormId++}`;\n        return `\n          <${rootEl} class=\"formly\"\n                   name=\"${formName}\"\n                   role=\"form\">\n            <div formly-field\n                 ng-repeat=\"field in fields track by $index\"\n                 ng-if=\"!field.hide\"\n                 class=\"formly-field {{field.type ? 'formly-field-' + field.type : ''}}\"\n                 options=\"field\"\n                 model=\"field.model || model\"\n                 fields=\"fields\"\n                 form=\"${formName}\"\n                 form-id=\"${formName}\"\n                 form-state=\"options.formState\"\n                 index=\"$index\">\n            </div>\n            <div ng-transclude></div>\n          </${rootEl}>\n        `;\n      },\n      replace: true,\n      transclude: true,\n      scope: {\n        fields: '=',\n        model: '=',\n        form: '=?',\n        options: '=?'\n      },\n      controller: function($scope) {\n        setupOptions();\n        $scope.model = $scope.model || {};\n        $scope.fields = $scope.fields || [];\n\n        angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n        angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n        // watch the model and evaluate watch expressions that depend on it.\n        $scope.$watch('model', function onResultUpdate(newResult) {\n          angular.forEach($scope.fields, function(field) {\n            /*jshint -W030 */\n            field.runExpressions && field.runExpressions(newResult);\n          });\n        }, true);\n\n        function setupOptions() {\n          formlyApiCheck.throw(optionsApi, [$scope.options], {prefix: 'formly-form options check'});\n          $scope.options = $scope.options || {};\n          $scope.options.formState = $scope.options.formState || {};\n\n          angular.extend($scope.options, {\n            updateInitialValue,\n            resetModel\n          });\n\n        }\n\n        function updateInitialValue() {\n          angular.forEach($scope.fields, field => field.updateInitialValue());\n        }\n\n        function resetModel() {\n          angular.forEach($scope.fields, field => field.resetModel());\n        }\n\n        function attachKey(field, index) {\n          field.key = field.key || index || 0;\n        }\n\n        function setupWatchers(field, index) {\n          if (!angular.isDefined(field.watcher)) {\n            return;\n          }\n          var watchers = field.watcher;\n          if (!angular.isArray(watchers)) {\n            watchers = [watchers];\n          }\n          angular.forEach(watchers, function(watcher) {\n            if (!angular.isDefined(watcher.listener)) {\n              throw formlyUsability.getFieldError(\n                'all-field-watchers-must-have-a-listener',\n                'All field watchers must have a listener', field\n              );\n            }\n            var watchExpression = getWatchExpression(watcher, field, index);\n            var watchListener = getWatchListener(watcher, field, index);\n\n            var type = watcher.type || '$watch';\n            watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n          });\n        }\n\n        function getWatchExpression(watcher, field, index) {\n          var watchExpression = watcher.expression || `model['${field.key}']`;\n          if (angular.isFunction(watchExpression)) {\n            // wrap the field's watch expression so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalExpression = watchExpression;\n            watchExpression = function formlyWatchExpression() {\n              var args = modifyArgs(watcher, index, ...arguments);\n              return originalExpression(...args);\n            };\n            watchExpression.displayName = `Formly Watch Expression for field for ${field.key}`;\n          }\n          return watchExpression;\n        }\n\n        function getWatchListener(watcher, field, index) {\n          var watchListener = watcher.listener;\n          if (angular.isFunction(watchListener)) {\n            // wrap the field's watch listener so we can call it with the field as the first arg\n            // and the stop function as the last arg as a helper\n            var originalListener = watchListener;\n            watchListener = function formlyWatchListener() {\n              var args = modifyArgs(watcher, index, ...arguments);\n              return originalListener(...args);\n            };\n            watchListener.displayName = `Formly Watch Listener for field for ${field.key}`;\n          }\n          return watchListener;\n        }\n\n        function modifyArgs(watcher, index, ...originalArgs) {\n          return [$scope.fields[index], ...originalArgs, watcher.stopWatching];\n        }\n      },\n      link(scope, el, attrs) {\n        if (attrs.form) {\n          const formId = attrs.name;\n          $parse(attrs.form).assign(scope.$parent, scope[formId]);\n        }\n\n        // chrome autocomplete lameness\n        // see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n        // ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n        const global = formlyConfig.extras.removeChromeAutoComplete === true;\n        const offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n        const onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n        if ((global && !offInstance) || onInstance) {\n          const input = document.createElement('input');\n          input.setAttribute('autocomplete', 'address-level4');\n          input.setAttribute('hidden', true);\n          el[0].appendChild(input);\n        }\n      }\n    };\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-form.js\n **/","module.exports = ngModule => {\n  require('./formly-custom-validation')(ngModule);\n  require('./formly-field')(ngModule);\n  require('./formly-form')(ngModule);\n  require('./formly-focus')(ngModule);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/index.js\n **/","const apiCheck = require('api-check');\nif (!apiCheck) {\n  throw new Error(\n    'angular-formly requires the library apiCheck.js! Please include it! ' +\n      require('./other/docsBaseUrl') + 'apicheckjs-dependency-required'\n  );\n}\nconst ngModuleName = 'formly';\nconst angular = require('./angular-fix');\nconst ngModule = angular.module(ngModuleName, []);\n\nrequire('./providers')(ngModule);\nrequire('./services')(ngModule);\nrequire('./directives')(ngModule);\nrequire('./run')(ngModule);\n\nmodule.exports = ngModuleName;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./index.common.js\n **/","module.exports = ngModule => {\n\n  let apiCheck = require('api-check')({\n    output: {\n      prefix: 'angular-formly:',\n      docsBaseUrl: require('../other/docsBaseUrl')\n    }\n  });\n\n  function shapeRequiredIfNot(otherProps, propChecker) {\n    if (!angular.isArray(otherProps)) {\n      otherProps = [otherProps];\n    }\n    const type = `specified if these are not specified: \\`${otherProps.join(', ')}\\` (otherwise it's optional)`;\n    function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n      var propExists = obj && obj.hasOwnProperty(propName);\n      var otherPropsExist = otherProps.some(function (otherProp) {\n        return obj && obj.hasOwnProperty(otherProp);\n      });\n      //console.log(propName, propExists, prop, otherPropsExist, otherProps.join(', '));\n      if (!otherPropsExist && !propExists) {\n        return apiCheck.utils.getError(propName, location, type);\n      } else if (propExists) {\n        return propChecker(prop, propName, location, obj);\n      }\n    }\n    shapeRequiredIfNotDefinition.type = type;\n    return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n  }\n\n  ngModule.constant('formlyApiCheck', apiCheck);\n  if (ON_TEST) {\n    require('./formlyApiCheck.test')(ngModule);\n  }\n\n  let formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n  let specifyWrapperType = apiCheck.oneOfType([\n    apiCheck.oneOf([null]), apiCheck.typeOrArrayOf(apiCheck.string)\n  ]);\n\n  const apiCheckProperty = apiCheck.objectOf(apiCheck.func);\n\n  const apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n    warn: apiCheck.func,\n    throw: apiCheck.func,\n    shape: apiCheck.func\n  }));\n\n  const apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\n  const formlyWrapperType = apiCheck.shape({\n    name: shapeRequiredIfNot('types', apiCheck.string).optional,\n    template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n    templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n    types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n    overwriteOk: apiCheck.bool.optional,\n    validateOptions: apiCheck.func.optional,\n    apiCheck: apiCheckProperty.optional,\n    apiCheckInstance: apiCheckInstanceProperty.optional,\n    apiCheckFunction: apiCheckFunctionProperty.optional,\n    apiCheckOptions: apiCheck.object.optional\n  }).strict;\n\n  let fieldOptionsApiShape = {\n    type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n    template: apiCheck.shape.ifNot(['type', 'templateUrl'], apiCheck.string).optional,\n    templateUrl: apiCheck.shape.ifNot(['type', 'template'], apiCheck.string).optional,\n    key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]),\n    model: apiCheck.object.optional,\n    expressionProperties: apiCheck.objectOf(apiCheck.oneOfType([\n      formlyExpression,\n      apiCheck.shape({\n        expression: formlyExpression,\n        message: formlyExpression.optional\n      }).strict\n    ])).optional,\n    data: apiCheck.object.optional,\n    templateOptions: apiCheck.object.optional,\n    wrapper: specifyWrapperType.optional,\n    modelOptions: apiCheck.shape({\n      updateOn: apiCheck.string.optional,\n      debounce: apiCheck.oneOfType([\n        apiCheck.object, apiCheck.string\n      ]).optional,\n      allowInvalid: apiCheck.bool.optional,\n      getterSetter: apiCheck.bool.optional,\n      timezone: apiCheck.string.optional\n    }).optional,\n    watcher: apiCheck.typeOrArrayOf(\n      apiCheck.shape({\n        expression: formlyExpression.optional,\n        listener: formlyExpression\n      })\n    ).optional,\n    validators: apiCheck.objectOf(apiCheck.oneOfType([\n      formlyExpression, apiCheck.shape({\n        expression: formlyExpression,\n        message: formlyExpression.optional\n      }).strict\n    ])).optional,\n    noFormControl: apiCheck.bool.optional,\n    hide: apiCheck.bool.optional,\n    ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n      expression: apiCheck.shape.ifNot(['value', 'attribute', 'bound'], apiCheck.any).optional,\n      value: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n      attribute: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n      bound: apiCheck.shape.ifNot('expression', apiCheck.any).optional\n    }).strict).optional,\n    optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n    link: apiCheck.func.optional,\n    controller: apiCheck.oneOfType([\n      apiCheck.string, apiCheck.func, apiCheck.array\n    ]).optional,\n    validation: apiCheck.shape({\n      show: apiCheck.oneOfType([\n        apiCheck.bool, apiCheck.oneOf([null])\n      ]).optional,\n      messages: apiCheck.objectOf(formlyExpression).optional,\n      errorExistsAndShouldBeVisible: apiCheck.bool.optional\n    }).optional,\n    formControl: apiCheck.object.optional,\n    value: apiCheck.func.optional,\n    runExpressions: apiCheck.func.optional,\n    resetModel: apiCheck.func.optional,\n    updateInitialValue: apiCheck.func.optional,\n    initialValue: apiCheck.any.optional\n  };\n\n  let formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\n  let typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape);\n  typeOptionsDefaultOptions.key = apiCheck.string.optional;\n\n  let formlyTypeOptions = apiCheck.shape({\n    name: apiCheck.string,\n    template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n    templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n    controller: apiCheck.oneOfType([\n      apiCheck.func, apiCheck.string, apiCheck.array\n    ]).optional,\n    link: apiCheck.func.optional,\n    defaultOptions: apiCheck.oneOfType([\n      apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)\n    ]).optional,\n    extends: apiCheck.string.optional,\n    wrapper: specifyWrapperType.optional,\n    data: apiCheck.object.optional,\n    validateOptions: apiCheck.func.optional,\n    apiCheck: apiCheckProperty.optional,\n    apiCheckInstance: apiCheckInstanceProperty.optional,\n    apiCheckFunction: apiCheckFunctionProperty.optional,\n    apiCheckOptions: apiCheck.object.optional,\n    overwriteOk: apiCheck.bool.optional\n  }).strict;\n\n  angular.extend(apiCheck, {\n    formlyTypeOptions, formlyFieldOptions, formlyExpression, formlyWrapperType\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyApiCheck.js\n **/","const angular = require('angular-fix');\nconst utils = require('../other/utils');\n\nmodule.exports = ngModule => {\n  ngModule.provider('formlyConfig', formlyConfig);\n\n  formlyConfig.tests = ON_TEST ? require('./formlyConfig.test')(ngModule) : null;\n\n  function formlyConfig(formlyUsabilityProvider, formlyApiCheck) {\n\n    var typeMap = {};\n    var templateWrappersMap = {};\n    var defaultWrapperName = 'default';\n    var _this = this;\n    var getError = formlyUsabilityProvider.getFormlyError;\n\n    angular.extend(this, {\n      setType,\n      getType,\n      setWrapper,\n      getWrapper,\n      getWrapperByType,\n      removeWrapperByName,\n      removeWrappersForType,\n      disableWarnings: false,\n      extras: {\n        disableNgModelAttrsManipulator: false,\n        ngModelAttrsManipulatorPreferUnbound: false,\n        removeChromeAutoComplete: false\n      },\n      templateManipulators: {\n        preWrapper: [],\n        postWrapper: []\n      },\n      $get: () => this\n    });\n\n    function setType(options) {\n      if (angular.isArray(options)) {\n        angular.forEach(options, setType);\n      } else if (angular.isObject(options)) {\n        checkType(options);\n        if (options.extends) {\n          extendTypeOptions(options);\n        }\n        typeMap[options.name] = options;\n      } else {\n        throw getError(`You must provide an object or array for setType. You provided: ${JSON.stringify(arguments)}`);\n      }\n    }\n\n    function checkType(options) {\n      formlyApiCheck.throw(formlyApiCheck.formlyTypeOptions, options, {\n        prefix: 'formlyConfig.setType',\n        url: 'settype-validation-failed'\n      });\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, typeMap, options, 'types');\n      } else {\n        options.overwriteOk = undefined;\n      }\n    }\n\n    function extendTypeOptions(options) {\n      const extendsType = getType(options.extends, true, options);\n      extendTypeControllerFunction(options, extendsType);\n      extendTypeLinkFunction(options, extendsType);\n      extendTypeValidateOptionsFunction(options, extendsType);\n      extendTypeDefaultOptions(options, extendsType);\n      utils.reverseDeepMerge(options, extendsType);\n    }\n\n    function extendTypeControllerFunction(options, extendsType) {\n      const extendsCtrl = extendsType.controller;\n      if (!angular.isDefined(extendsCtrl)) {\n        return;\n      }\n      const optionsCtrl = options.controller;\n      if (angular.isDefined(optionsCtrl)) {\n        options.controller = function($scope, $controller) {\n          $controller(extendsCtrl, {$scope});\n          $controller(optionsCtrl, {$scope});\n        };\n        options.controller.$inject = ['$scope', '$controller'];\n      } else {\n        options.controller = extendsCtrl;\n      }\n    }\n\n    function extendTypeLinkFunction(options, extendsType) {\n      const extendsFn = extendsType.link;\n      if (!angular.isDefined(extendsFn)) {\n        return;\n      }\n      const optionsFn = options.link;\n      if (angular.isDefined(optionsFn)) {\n        options.link = function() {\n          extendsFn(...arguments);\n          optionsFn(...arguments);\n        };\n      } else {\n        options.link = extendsFn;\n      }\n    }\n\n    function extendTypeValidateOptionsFunction(options, extendsType) {\n      const extendsFn = extendsType.validateOptions;\n      if (!angular.isDefined(extendsFn)) {\n        return;\n      }\n      const optionsFn = options.validateOptions;\n      const originalDefaultOptions = options.defaultOptions;\n      if (angular.isDefined(optionsFn)) {\n        options.validateOptions = function(options) {\n          optionsFn(options);\n          let mergedOptions = angular.copy(options);\n          let defaultOptions = originalDefaultOptions;\n          if (defaultOptions) {\n            if (angular.isFunction(defaultOptions)) {\n              defaultOptions = defaultOptions(mergedOptions);\n            }\n            utils.reverseDeepMerge(mergedOptions, defaultOptions);\n          }\n          extendsFn(mergedOptions);\n        };\n      } else {\n        options.validateOptions = extendsFn;\n      }\n    }\n\n    function extendTypeDefaultOptions(options, extendsType) {\n      const extendsDO = extendsType.defaultOptions;\n      if (!angular.isDefined(extendsDO)) {\n        return;\n      }\n      const optionsDO = options.defaultOptions;\n      const optionsDOIsFn = angular.isFunction(optionsDO);\n      const extendsDOIsFn = angular.isFunction(extendsDO);\n      if (extendsDOIsFn) {\n        options.defaultOptions = function defaultOptions(options) {\n          const extendsDefaultOptions = extendsDO(options);\n          const mergedDefaultOptions = {};\n          utils.reverseDeepMerge(mergedDefaultOptions, options, extendsDefaultOptions);\n          let extenderOptionsDefaultOptions = optionsDO;\n          if (optionsDOIsFn) {\n            extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);\n          }\n          utils.reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n          return extendsDefaultOptions;\n        };\n      } else if (optionsDOIsFn) {\n        options.defaultOptions = function defaultOptions(options) {\n          let newDefaultOptions = {};\n          utils.reverseDeepMerge(newDefaultOptions, options, extendsDO);\n          return optionsDO(newDefaultOptions);\n        };\n      }\n    }\n\n    function getType(name, throwError, errorContext) {\n      if (!name) {\n        return undefined;\n      }\n      var type = typeMap[name];\n      if (!type && throwError === true) {\n        throw getError(\n          `There is no type by the name of \"${name}\": ${JSON.stringify(errorContext)}`\n        );\n      } else {\n        return type;\n      }\n    }\n\n    function setWrapper(options, name) {\n      if (angular.isArray(options)) {\n        return options.map(wrapperOptions => setWrapper(wrapperOptions));\n      } else if (angular.isObject(options)) {\n        options.types = getOptionsTypes(options);\n        options.name = getOptionsName(options, name);\n        checkWrapperAPI(options);\n        templateWrappersMap[options.name] = options;\n        return options;\n      } else if (angular.isString(options)) {\n        return setWrapper({\n          template: options,\n          name\n        });\n      }\n    }\n\n    function getOptionsTypes(options) {\n      if (angular.isString(options.types)) {\n        return [options.types];\n      }\n      if (!angular.isDefined(options.types)) {\n        return [];\n      } else {\n        return options.types;\n      }\n    }\n\n    function getOptionsName(options, name) {\n      return options.name || name || options.types.join(' ') || defaultWrapperName;\n    }\n\n    function checkWrapperAPI(options) {\n      formlyUsabilityProvider.checkWrapper(options);\n      if (options.template) {\n        formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n      }\n      if (!options.overwriteOk) {\n        checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n      } else {\n        delete options.overwriteOk;\n      }\n      checkWrapperTypes(options);\n    }\n\n    function checkWrapperTypes(options) {\n      let shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n      if (shouldThrow) {\n        throw getError(`Attempted to create a template wrapper with types that is not a string or an array of strings`);\n      }\n    }\n\n    function checkOverwrite(property, object, newValue, objectName) {\n      if (object.hasOwnProperty(property)) {\n        warn([\n          `Attempting to overwrite ${property} on ${objectName} which is currently`,\n          `${JSON.stringify(object[property])} with ${JSON.stringify(newValue)}`,\n          `To supress this warning, specify the property \"overwriteOk: true\"`\n        ].join(' '));\n      }\n    }\n\n    function getWrapper(name) {\n      return templateWrappersMap[name || defaultWrapperName];\n    }\n\n    function getWrapperByType(type) {\n      /* jshint maxcomplexity:6 */\n      var wrappers = [];\n      for (var name in templateWrappersMap) {\n        if (templateWrappersMap.hasOwnProperty(name)) {\n          if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n            wrappers.push(templateWrappersMap[name]);\n          }\n        }\n      }\n      return wrappers;\n    }\n\n    function removeWrapperByName(name) {\n      var wrapper = templateWrappersMap[name];\n      delete templateWrappersMap[name];\n      return wrapper;\n    }\n\n    function removeWrappersForType(type) {\n      var wrappers = getWrapperByType(type);\n      if (!wrappers) {\n        return;\n      }\n      if (!angular.isArray(wrappers)) {\n        return removeWrapperByName(wrappers.name);\n      } else {\n        wrappers.forEach((wrapper) => removeWrapperByName(wrapper.name));\n        return wrappers;\n      }\n    }\n\n\n    function warn() {\n      if (!_this.disableWarnings) {\n        console.warn(...arguments);\n      }\n    }\n  }\n\n\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyConfig.js\n **/","module.exports = ngModule => {\n  ngModule.constant(\n    'formlyErrorAndWarningsUrlPrefix',\n    `https://github.com/formly-js/angular-formly/blob/${VERSION}/other/ERRORS_AND_WARNINGS.md#`\n  );\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyErrorAndWarningsUrlPrefix.js\n **/","var angular = require('angular-fix');\n\nmodule.exports = ngModule => {\n  ngModule.provider('formlyUsability', function(formlyVersion, formlyApiCheck) {\n    var errorsAndWarningsUrlPrefix =\n      `https://github.com/formly-js/angular-formly/blob/${formlyVersion}/other/ERRORS_AND_WARNINGS.md#`;\n    angular.extend(this, {\n      getFormlyError: getFormlyError,\n      getFieldError: getFieldError,\n      checkWrapper: checkWrapper,\n      checkWrapperTemplate: checkWrapperTemplate,\n      $get: () => this\n    });\n\n    function getFieldError(errorInfoSlug, message, field) {\n      if (arguments.length < 3) {\n        field = message;\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message) + ` Field definition: ${angular.toJson(field)}`);\n    }\n\n    function getFormlyError(errorInfoSlug, message) {\n      if (!message) {\n        message = errorInfoSlug;\n        errorInfoSlug = null;\n      }\n      return new Error(getErrorMessage(errorInfoSlug, message));\n    }\n\n    function getErrorMessage(errorInfoSlug, message) {\n      let url = '';\n      if (errorInfoSlug !== null) {\n        url = `${errorsAndWarningsUrlPrefix}${errorInfoSlug}`;\n      }\n      return `Formly Error: ${message}. ${url}`;\n    }\n\n    function checkWrapper(wrapper) {\n      formlyApiCheck.throw(formlyApiCheck.formlyWrapperType, wrapper, {\n        prefix: 'formlyConfig.setWrapper',\n        urlSuffix: 'setwrapper-validation-failed'\n      });\n    }\n\n    function checkWrapperTemplate(template, additionalInfo) {\n      var formlyTransclude = '<formly-transclude></formly-transclude>';\n      if (template.indexOf(formlyTransclude) === -1) {\n        throw getFormlyError(\n          `Template wrapper templates must use \"${formlyTransclude}\" somewhere in them. ` +\n          `This one does not have \"<formly-transclude></formly-transclude>\" in it: ${template}` + '\\n' +\n          `Additional information: ${JSON.stringify(additionalInfo)}`\n        );\n      }\n    }\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyUsability.js\n **/","module.exports = ngModule => {\n  ngModule.factory('formlyValidationMessages', function() {\n\n    var formlyValidationMessages = {\n      addTemplateOptionValueMessage,\n      addStringMessage,\n      messages: {}\n    };\n\n    return formlyValidationMessages;\n\n    function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n      formlyValidationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n    }\n\n    function addStringMessage(name, string) {\n      formlyValidationMessages.messages[name] = () => string;\n    }\n\n\n    function templateOptionValue(prop, prefix, suffix, alternate) {\n      return function getValidationMessage(viewValue, modelValue, scope) {\n        if (scope.options.templateOptions[prop]) {\n          return `${prefix} ${scope.options.templateOptions[prop]} ${suffix}`;\n        } else {\n          return alternate;\n        }\n      };\n    }\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyValidationMessages.js\n **/","module.exports = ngModule => {\n  ngModule.constant('formlyVersion', VERSION);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyVersion.js\n **/","module.exports = ngModule => {\n  require('./formlyApiCheck')(ngModule);\n  require('./formlyUsability')(ngModule);\n  require('./formlyConfig')(ngModule);\n  require('./formlyVersion')(ngModule);\n  require('./formlyErrorAndWarningsUrlPrefix')(ngModule);\n  require('./formlyValidationMessages')(ngModule);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/index.js\n **/","module.exports = ngModule => {\n  ngModule.run(addCustomTags);\n\n  function addCustomTags($document) {\n\n    if ($document && $document.get) {\n      //IE8 check ->\n      // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203\n      var document = $document.get(0);\n      var div = document.createElement('div');\n      div.innerHTML = '<!--[if lt IE 9]><i></i><![endif]-->';\n      var isIeLessThan9 = (div.getElementsByTagName('i').length === 1);\n\n      if (isIeLessThan9) {\n        //add the custom elements that we need for formly\n        var customElements =\n          ['formly-field', 'formly-form', 'formly-custom-validation', 'formly-focus', 'formly-transpose'];\n\n        for (var i = 0; i < customElements.length; i++) {\n          document.createElement(customElements[i]);\n        }\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./run/formlyCustomTags.js\n **/","const angular = require('../angular-fix');\n\nmodule.exports = ngModule => {\n  ngModule.run(addFormlyNgModelAttrsManipulator);\n\n  addFormlyNgModelAttrsManipulator.test = ON_TEST ? require('./formlyNgModelAttrsManipulator.test')(ngModule) : null;\n\n  function addFormlyNgModelAttrsManipulator(formlyConfig) {\n    if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n      return;\n    }\n    formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\n\n    function ngModelAttrsManipulator(template, options, scope) {\n      /* jshint maxcomplexity:6 */\n      var el = document.createElement('div');\n      var data = options.data;\n      if (data.skipNgModelAttrsManipulator === true) {\n        return template;\n      }\n      el.innerHTML = template;\n      var modelNodes = el.querySelectorAll('[ng-model]');\n      if (!modelNodes || !modelNodes.length) {\n        return template;\n      }\n\n      addIfNotPresent(modelNodes, 'id', scope.id);\n      addIfNotPresent(modelNodes, 'name', scope.id);\n\n      addValidation();\n      addModelOptions();\n      addTemplateOptionsAttrs();\n\n\n      return el.innerHTML;\n\n\n      function addValidation() {\n        if (angular.isDefined(options.validators) || angular.isDefined(options.validation.messages)) {\n          addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n        }\n      }\n\n      function addModelOptions() {\n        if (angular.isDefined(options.modelOptions)) {\n          addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n          if (options.modelOptions.getterSetter) {\n            angular.forEach(modelNodes, node => {\n              node.setAttribute('ng-model', 'options.value');\n            });\n          }\n        }\n      }\n\n      function addTemplateOptionsAttrs() {\n        if (!options.templateOptions && !options.expressionProperties) {\n          // no need to run these if there are no templateOptions or expressionProperties\n          return;\n        }\n        const to = options.templateOptions || {};\n        const ep = options.expressionProperties || {};\n\n        let ngModelAttributes = getBuiltInAttributes();\n\n        // extend with the user's specifications winning\n        angular.extend(ngModelAttributes, options.ngModelAttrs);\n\n        // Feel free to make this more simple :-)\n        angular.forEach(ngModelAttributes, (val, name) => {\n          /* jshint maxcomplexity:14 */\n          let attrVal;\n          let attrName;\n          const ref = `options.templateOptions['${name}']`;\n          const toVal = to[name];\n          const epVal = getEpValue(ep, name);\n\n          const inTo = angular.isDefined(toVal);\n          const inEp = angular.isDefined(epVal);\n          if (val.value) {\n            // I realize this looks backwards, but it's right, trust me...\n            attrName = val.value;\n            attrVal = name;\n          } else if (val.expression && inTo) {\n            attrName = val.expression;\n            if (angular.isString(to[name])) {\n              attrVal = `$eval(${ref})`;\n            } else if (angular.isFunction(to[name])) {\n              attrVal = `${ref}(model[options.key], options, this, $event)`;\n            } else {\n              throw new Error(\n                `options.templateOptions.${name} must be a string or function: ${JSON.stringify(options)}`\n              );\n            }\n          } else if (val.bound && inEp) {\n            attrName = val.bound;\n            attrVal = ref;\n          } else if ((val.attribute || val.boolean) && inEp) {\n            attrName = val.attribute || val.boolean;\n            attrVal = `{{${ref}}}`;\n          } else if (val.attribute && inTo) {\n            attrName = val.attribute;\n            attrVal = toVal;\n          } else if (val.boolean) {\n            if (inTo && !inEp && toVal) {\n              attrName = val.boolean;\n              attrVal = true;\n            } else {\n              // jshint -W035\n              // empty to illustrate that a boolean will not be added via val.bound\n              // if you want it added via val.bound, then put it in expressionProperties\n            }\n          } else if (val.bound && inTo) {\n            attrName = val.bound;\n            attrVal = ref;\n          }\n\n          if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n            addIfNotPresent(modelNodes, attrName, attrVal);\n          }\n        });\n      }\n    }\n\n    // Utility functions\n    function getBuiltInAttributes() {\n      let ngModelAttributes = {\n        focus: {\n          attribute: 'formly-focus'\n        }\n      };\n      const boundOnly = [];\n      const bothBooleanAndBound = ['required', 'disabled'];\n      const bothAttributeAndBound = ['pattern', 'minlength'];\n      const expressionOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n      const attributeOnly = ['placeholder', 'min', 'max', 'tabindex', 'type'];\n      if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n        bothAttributeAndBound.push('maxlength');\n      } else {\n        boundOnly.push('maxlength');\n      }\n\n      angular.forEach(boundOnly, item => {\n        ngModelAttributes[item] = {bound: 'ng-' + item};\n      });\n\n      angular.forEach(bothBooleanAndBound, item => {\n        ngModelAttributes[item] = {boolean: item, bound: 'ng-' + item};\n      });\n\n      angular.forEach(bothAttributeAndBound, item => {\n        ngModelAttributes[item] = {attribute: item, bound: 'ng-' + item};\n      });\n\n      angular.forEach(expressionOnly, item => {\n        var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n        ngModelAttributes[propName] = {expression: 'ng-' + item};\n      });\n\n      angular.forEach(attributeOnly, item => {\n        ngModelAttributes[item] = {attribute: item};\n      });\n      return ngModelAttributes;\n    }\n\n    function getEpValue(ep, name) {\n      return ep['templateOptions.' + name] ||\n        ep[`templateOptions['${name}']`] ||\n        ep[`templateOptions[\"${name}\"]`];\n    }\n\n    function addIfNotPresent(nodes, attr, val) {\n      angular.forEach(nodes, node => {\n        if (!node.getAttribute(attr)) {\n          node.setAttribute(attr, val);\n        }\n      });\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./run/formlyNgModelAttrsManipulator.js\n **/","module.exports = ngModule => {\n  require('./formlyNgModelAttrsManipulator')(ngModule);\n  require('./formlyCustomTags')(ngModule);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./run/index.js\n **/","const utils = require('../other/utils');\n\nmodule.exports = ngModule => {\n  ngModule.factory('formlyUtil', formlyUtil);\n\n  formlyUtil.tests = ON_TEST ? require('./formlyUtil.test')(ngModule) : null;\n\n  function formlyUtil() {\n    return utils;\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./services/formlyUtil.js\n **/","module.exports = ngModule => {\n  ngModule.factory('formlyWarn', function (formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n    return function warn() {\n      if (!formlyConfig.disableWarnings) {\n        var args = Array.prototype.slice.call(arguments);\n        var warnInfoSlug = args.shift();\n        args.unshift('Formly Warning:');\n        args.push(`${formlyErrorAndWarningsUrlPrefix}${warnInfoSlug}`);\n        $log.warn(...args);\n      }\n    };\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./services/formlyWarn.js\n **/","module.exports = ngModule => {\n  require('./formlyUtil')(ngModule);\n  require('./formlyWarn')(ngModule);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./services/index.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_24__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 24\n ** module chunks = 0\n **/"],"sourceRoot":""}