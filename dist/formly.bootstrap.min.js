angular.module("formly.render",[]),angular.module("formly",["formly.render"]),angular.module("formly.render").provider("formlyConfig",function(){"use strict";function a(b,c){"string"==typeof b?e[b]=c:angular.forEach(b,function(b,c){a(c,b)})}function b(a){return e[a]}function c(a,b){"string"==typeof a?f[a]=b:angular.forEach(a,function(a,b){c(b,a)})}function d(a){return f[a]}var e={},f={};this.getTemplateUrl=b,this.setTemplateUrl=a,this.getTemplate=d,this.setTemplate=c,this.$get=function(){return this}}),angular.module("formly.render").directive("formlyCustomValidation",["$parse",function(a){"use strict";return{require:"ngModel",link:function(b,c,d,e){function f(c,d){if(c.validate){var f=!1;if(angular.isFunction(c.validate))f=c.validate(d,b);else{var g={value:d,options:b.options,result:b.result};f=a(c.validate)(g)}e.$setValidity(c.name,f)}}var g=b.$eval(d.formlyCustomValidation);g&&(angular.isArray(g)||(g=[g]),angular.forEach(g,function(a){e.$parsers.unshift(function(b){return f(a,b),b})}))}}}]),angular.module("formly.render").directive("formlyDynamicName",function(){"use strict";return{restrict:"A",priority:599,controller:["$scope","$element","$attrs",function(a,b,c){b.removeAttr("formly-dynamic-name"),c.$set("name",a.$eval(c.formlyDynamicName)),delete c.formlyDynamicName,a.$emit("formly-dynamic-name-update")}]}}),angular.module("formly.render").directive("formlyField",["$http","$compile","$templateCache","$interpolate","formlyConfig",function(a,b,c,d,e){"use strict";return{restrict:"AE",transclude:!0,scope:{optionsData:"&options",formId:"=formId",index:"=index",result:"=formResult"},link:function(f,g){function h(a){var c=d.startSymbol(),e=d.endSymbol();"{{"!==c&&(a=a.replace(/\{\{/g,c)),"}}"!==e&&(a=a.replace(/\}\}/g,e)),g.html(a),b(g.contents())(f)}var i=f.options.template||e.getTemplate(f.options.type);if(i)h(i);else{var j=f.options.templateUrl||e.getTemplateUrl(f.options.type);j?a.get(j,{cache:c}).then(function(a){h(a.data)},function(a){console.warn("Formly Error: Problem loading template for "+j,a)}):console.warn("Formly Error: template type '"+f.options.type+"' not supported.")}},controller:["$scope",function(a){a.options=a.optionsData();var b=a.options.type;!b&&a.options.template?b="template":!b&&a.options.templateUrl&&(b="templateUrl"),a.id=a.formId+b+a.index}]}}]),angular.module("formly.render").directive("formlyForm",function(){"use strict";return{restrict:"E",templateUrl:"directives/formly-form.html",replace:!0,transclude:!0,scope:{fields:"=",options:"=?",result:"=",formOnParentScope:"=name"},compile:function(){return{post:function(a,b,c){a.formOnParentScope=a[c.name]}}},controller:["$scope","$element","$parse",function(a,b,c){angular.forEach(a.fields,function(b){if(angular.isDefined(b.watch)&&angular.isDefined(b.watch.expression)&&angular.isDefined(b.watch.listener)){var c=b.watch.expression;angular.isFunction(c)&&(c=function(){var a=Array.prototype.slice.call(arguments,0);return a.unshift(b),b.watch.expression.apply(this,a)}),a.$watch(c,function(){var a=Array.prototype.slice.call(arguments,0);return a.unshift(b),b.watch.listener.apply(this,a)})}}),a.$watch("result",function(){angular.forEach(a.fields,function(b){b.hideExpression&&(b.hide=c(b.hideExpression)(a.result)),b.requiredExpression&&(b.required=c(b.requiredExpression)(a.result))})},!0),a.$on("formly-dynamic-name-update",function(b){b.stopPropagation(),window.setTimeout(function(){angular.forEach(a.fields,function(b){var c=a.formOnParentScope[b.key];c&&(b.formField=c)})})})}]}}),angular.module("formly.render").run(["$templateCache",function(a){"use strict";a.put("fields/formly-field-checkbox.html","<div class=checkbox ng-class=\"{'has-error': options.formField.$invalid}\"><label><input type=checkbox id={{id}} formly-dynamic-name=options.key formly-custom-validation=options.validators aria-describedby={{id}}_description ng-required=options.required ng-disabled=options.disabled ng-model=\"result[options.key || index]\"> {{options.label || 'Checkbox'}} {{options.required ? '*' : ''}}</label><p id={{id}}_description class=help-block ng-if=options.description>{{options.description}}</p></div>"),a.put("fields/formly-field-email.html","<div class=form-group ng-class=\"{'has-error': options.formField.$invalid}\"><label for={{id}}>{{options.label || 'Email'}} {{options.required ? '*' : ''}}</label><input type=email class=form-control id={{id}} formly-dynamic-name=options.key formly-custom-validation=options.validators placeholder={{options.placeholder}} aria-describedby={{id}}_description ng-required=options.required ng-disabled=options.disabled ng-model=\"result[options.key || index]\"><p id={{id}}_description class=help-block ng-if=options.description>{{options.description}}</p></div>"),a.put("fields/formly-field-hidden.html",'<input type=hidden ng-model="result[options.key || index]">'),a.put("fields/formly-field-number.html","<div class=form-group ng-class=\"{'has-error': options.formField.$invalid}\"><label for={{id}}>{{options.label || 'Number'}} {{options.required ? '*' : ''}}</label><input type=number class=form-control id={{id}} formly-dynamic-name=options.key formly-custom-validation=options.validators placeholder={{options.placeholder}} aria-describedby={{id}}_description ng-required=options.required ng-disabled=options.disabled min={{options.min}} max={{options.max}} ng-minlength={{options.minlength}} ng-maxlength={{options.maxlength}} ng-model=\"result[options.key || index]\"><p id={{id}}_description class=help-block ng-if=options.description>{{options.description}}</p></div>"),a.put("fields/formly-field-password.html","<div class=form-group ng-class=\"{'has-error': options.formField.$invalid}\"><label for={{id}}>{{options.label || 'Password'}} {{options.required ? '*' : ''}}</label><input type=password class=form-control id={{id}} formly-dynamic-name=options.key formly-custom-validation=options.validators aria-describedby={{id}}_description ng-required=options.required ng-disabled=options.disabled ng-trim=\"{{options.trimWhitespace || false}}\" ng-model=\"result[options.key || index]\"><p id={{id}}_description class=help-block ng-if=options.description>{{options.description}}</p></div>"),a.put("fields/formly-field-radio.html","<div class=radio-group ng-class=\"{'has-error': options.formField.$invalid}\"><label class=control-label>{{options.label}} {{options.required ? '*' : ''}}</label><div class=radio ng-repeat=\"(key, option) in options.options\"><label><input type=radio formly-dynamic-name=options.key formly-custom-validation=options.validators id=\"{{id + '_'+ $index}}\" aria-describedby={{id}}_description ng-value=option.value ng-required=options.required ng-model=\"$parent.result[$parent.options.key || $parent.index]\"> {{option.name}}</label><p id={{id}}_description class=help-block ng-if=option.description>{{option.description}}</p></div></div>"),a.put("fields/formly-field-select.html","<div class=form-group ng-class=\"{'has-error': options.formField.$invalid}\"><label for={{id}}>{{options.label || 'Select'}} {{options.required ? '*' : ''}}</label><select class=form-control id={{id}} formly-dynamic-name=options.key formly-custom-validation=options.validators aria-describedby={{id}}_description ng-model=\"result[options.key || index]\" ng-required=options.required ng-disabled=options.disabled ng-options=\"option.value as option.name group by option.group for option in options.options\"></select><p id={{id}}_description class=help-block ng-if=options.description>{{options.description}}</p></div>"),a.put("fields/formly-field-text.html","<div class=form-group ng-class=\"{'has-error': options.formField.$invalid}\"><label for={{id}}>{{options.label || 'Text'}} {{options.required ? '*' : ''}}</label><input type=text class=form-control id={{id}} formly-dynamic-name=options.key formly-custom-validation=options.validators placeholder={{options.placeholder}} aria-describedby={{id}}_description ng-required=options.required ng-disabled=options.disabled ng-model=\"result[options.key || index]\"><p id={{id}}_description class=help-block ng-if=options.description>{{options.description}}</p></div>"),a.put("fields/formly-field-textarea.html","<div class=form-group ng-class=\"{'has-error': options.formField.$invalid}\"><label for={{id}}>{{options.label || 'Text'}} {{options.required ? '*' : ''}}</label><textarea type=text class=form-control id={{id}} formly-dynamic-name=options.key formly-custom-validation=options.validators rows={{options.lines}} placeholder={{options.placeholder}} aria-describedby={{id}}_description ng-required=options.required ng-disabled=options.disabled ng-model=\"result[options.key || index]\">\n	</textarea><p id={{id}}_description class=help-block ng-if=options.description>{{options.description}}</p></div>")}]),angular.module("formly.render").run(["$templateCache",function(a){"use strict";a.put("directives/formly-form.html",'<form class=formly role=form><formly-field ng-repeat="field in fields" options=field form-result=result form-id=options.uniqueFormId ng-if=!field.hide index=$index></formly-field><div ng-transclude></div></form>')}]),angular.module("formly.render").config(["formlyConfigProvider",function(a){"use strict";var b=["textarea","radio","select","number","checkbox","password","hidden","email","text"];angular.forEach(b,function(b){a.setTemplateUrl(b,"fields/formly-field-"+b+".html")})}]);
//# sourceMappingURL=formly.bootstrap.min.map